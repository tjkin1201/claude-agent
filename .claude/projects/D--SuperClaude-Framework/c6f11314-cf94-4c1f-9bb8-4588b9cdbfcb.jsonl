{"type":"summary","summary":"SuperClaude Framework: CLAUDE.md Creation & Docs","leafUuid":"7ee8df51-c369-45f7-aecb-1a7bbdf4ade4"}
{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"D:\\SuperClaude_Framework","sessionId":"c6f11314-cf94-4c1f-9bb8-4588b9cdbfcb","version":"1.0.59","gitBranch":"master","type":"user","message":{"role":"user","content":"superclaude를 잘 활용할수있는 여러가지 방법을 .md파일로 문서화해줘\n이해하기 쉽게 설명해줘\n"},"uuid":"3c17ce28-677e-4995-b04a-e35a66eb7607","timestamp":"2025-07-24T12:48:07.511Z"}
{"parentUuid":"3c17ce28-677e-4995-b04a-e35a66eb7607","isSidechain":false,"userType":"external","cwd":"D:\\SuperClaude_Framework","sessionId":"c6f11314-cf94-4c1f-9bb8-4588b9cdbfcb","version":"1.0.59","gitBranch":"master","message":{"id":"msg_014sryW2syVBiY6pJ4YUeMTu","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"SuperClaude 프레임워크 활용 가이드를 작성해드리겠습니다."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":28134,"cache_read_input_tokens":10824,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CRRsPg8XsJTZo9E3NUdTv","type":"assistant","uuid":"2e6516d6-bc26-4d2a-bb3b-9598b06fa114","timestamp":"2025-07-24T12:48:10.884Z"}
{"parentUuid":"2e6516d6-bc26-4d2a-bb3b-9598b06fa114","isSidechain":false,"userType":"external","cwd":"D:\\SuperClaude_Framework","sessionId":"c6f11314-cf94-4c1f-9bb8-4588b9cdbfcb","version":"1.0.59","gitBranch":"master","message":{"id":"msg_014sryW2syVBiY6pJ4YUeMTu","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01YKTpMXidcjKhG1VA6Wjhbf","name":"TodoWrite","input":{"todos":[{"id":"1","content":"SuperClaude 기본 사용법 섹션 작성","status":"pending","priority":"high"},{"id":"2","content":"명령어별 활용 방법 섹션 작성","status":"pending","priority":"high"},{"id":"3","content":"페르소나 시스템 활용법 섹션 작성","status":"pending","priority":"medium"},{"id":"4","content":"플래그 시스템 활용법 섹션 작성","status":"pending","priority":"medium"},{"id":"5","content":"실전 활용 예시 섹션 작성","status":"pending","priority":"high"},{"id":"6","content":"문서 검토 및 완성","status":"pending","priority":"low"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":28134,"cache_read_input_tokens":10824,"output_tokens":407,"service_tier":"standard"}},"requestId":"req_011CRRsPg8XsJTZo9E3NUdTv","type":"assistant","uuid":"16287af1-c127-4dc9-a710-a24247147ec0","timestamp":"2025-07-24T12:48:14.407Z"}
{"parentUuid":"16287af1-c127-4dc9-a710-a24247147ec0","isSidechain":false,"userType":"external","cwd":"D:\\SuperClaude_Framework","sessionId":"c6f11314-cf94-4c1f-9bb8-4588b9cdbfcb","version":"1.0.59","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01YKTpMXidcjKhG1VA6Wjhbf","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"368da509-5be1-4eca-aba9-44397be9b0be","timestamp":"2025-07-24T12:48:14.451Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"SuperClaude 기본 사용법 섹션 작성","status":"pending","priority":"high","id":"1"},{"content":"명령어별 활용 방법 섹션 작성","status":"pending","priority":"high","id":"2"},{"content":"실전 활용 예시 섹션 작성","status":"pending","priority":"high","id":"5"},{"content":"페르소나 시스템 활용법 섹션 작성","status":"pending","priority":"medium","id":"3"},{"content":"플래그 시스템 활용법 섹션 작성","status":"pending","priority":"medium","id":"4"},{"content":"문서 검토 및 완성","status":"pending","priority":"low","id":"6"}]}}
{"parentUuid":"368da509-5be1-4eca-aba9-44397be9b0be","isSidechain":false,"userType":"external","cwd":"D:\\SuperClaude_Framework","sessionId":"c6f11314-cf94-4c1f-9bb8-4588b9cdbfcb","version":"1.0.59","gitBranch":"master","message":{"id":"msg_01QGFtQVrKh6kjakJ8QrZyZ1","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01WVigiYBW97Hs9Wqgqa69om","name":"TodoWrite","input":{"todos":[{"id":"1","content":"SuperClaude 기본 사용법 섹션 작성","status":"in_progress","priority":"high"},{"id":"2","content":"명령어별 활용 방법 섹션 작성","status":"pending","priority":"high"},{"id":"3","content":"페르소나 시스템 활용법 섹션 작성","status":"pending","priority":"medium"},{"id":"4","content":"플래그 시스템 활용법 섹션 작성","status":"pending","priority":"medium"},{"id":"5","content":"실전 활용 예시 섹션 작성","status":"pending","priority":"high"},{"id":"6","content":"문서 검토 및 완성","status":"pending","priority":"low"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":813,"cache_read_input_tokens":38958,"output_tokens":501,"service_tier":"standard"}},"requestId":"req_011CRRsQBvfr6GLbjKaSAdYn","type":"assistant","uuid":"0b79dd3c-2646-4219-95e0-c02673a00535","timestamp":"2025-07-24T12:48:20.071Z"}
{"parentUuid":"0b79dd3c-2646-4219-95e0-c02673a00535","isSidechain":false,"userType":"external","cwd":"D:\\SuperClaude_Framework","sessionId":"c6f11314-cf94-4c1f-9bb8-4588b9cdbfcb","version":"1.0.59","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01WVigiYBW97Hs9Wqgqa69om","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"7729f81f-2cce-4c8e-b524-8c4c647b95b9","timestamp":"2025-07-24T12:48:20.100Z","toolUseResult":{"oldTodos":[{"content":"SuperClaude 기본 사용법 섹션 작성","status":"pending","priority":"high","id":"1"},{"content":"명령어별 활용 방법 섹션 작성","status":"pending","priority":"high","id":"2"},{"content":"페르소나 시스템 활용법 섹션 작성","status":"pending","priority":"medium","id":"3"},{"content":"플래그 시스템 활용법 섹션 작성","status":"pending","priority":"medium","id":"4"},{"content":"실전 활용 예시 섹션 작성","status":"pending","priority":"high","id":"5"},{"content":"문서 검토 및 완성","status":"pending","priority":"low","id":"6"}],"newTodos":[{"content":"SuperClaude 기본 사용법 섹션 작성","status":"in_progress","priority":"high","id":"1"},{"content":"명령어별 활용 방법 섹션 작성","status":"pending","priority":"high","id":"2"},{"content":"실전 활용 예시 섹션 작성","status":"pending","priority":"high","id":"5"},{"content":"페르소나 시스템 활용법 섹션 작성","status":"pending","priority":"medium","id":"3"},{"content":"플래그 시스템 활용법 섹션 작성","status":"pending","priority":"medium","id":"4"},{"content":"문서 검토 및 완성","status":"pending","priority":"low","id":"6"}]}}
{"parentUuid":"7729f81f-2cce-4c8e-b524-8c4c647b95b9","isSidechain":false,"userType":"external","cwd":"D:\\SuperClaude_Framework","sessionId":"c6f11314-cf94-4c1f-9bb8-4588b9cdbfcb","version":"1.0.59","gitBranch":"master","message":{"id":"msg_019fKFb44F8MNgEk6cxnpvXc","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01D6W2Uvw2gjcrAAu8cZN8Cn","name":"Write","input":{"file_path":"D:\\SuperClaude_Framework\\SuperClaude_활용_가이드.md","content":"# SuperClaude 프레임워크 완전 활용 가이드\n\nSuperClaude는 Claude Code를 확장하여 개발자의 생산성을 극대화하는 강력한 프레임워크입니다. 이 가이드에서는 SuperClaude의 모든 기능을 효과적으로 활용하는 방법을 단계별로 설명합니다.\n\n## 목차\n1. [기본 개념과 설치](#기본-개념과-설치)\n2. [핵심 명령어 활용법](#핵심-명령어-활용법)\n3. [페르소나 시스템 활용](#페르소나-시스템-활용)\n4. [플래그 시스템 마스터하기](#플래그-시스템-마스터하기)\n5. [MCP 서버 통합 활용](#mcp-서버-통합-활용)\n6. [실전 활용 시나리오](#실전-활용-시나리오)\n7. [고급 팁과 트릭](#고급-팁과-트릭)\n\n---\n\n## 기본 개념과 설치\n\n### SuperClaude란?\nSuperClaude는 Claude Code에 특화된 명령어, 페르소나, MCP 서버 통합을 제공하는 Python 프레임워크입니다. 개발 워크플로우를 체계화하고 자동화하여 개발자의 생산성을 크게 향상시킵니다.\n\n### 핵심 구성 요소\n- **16개 전문 명령어**: 개발 전 과정을 커버하는 특화된 명령어\n- **11개 전문 페르소나**: 도메인별 특화된 AI 행동 패턴\n- **MCP 서버 통합**: Context7, Sequential, Magic, Playwright 서버\n- **플래그 시스템**: 세밀한 실행 제어와 최적화\n- **Wave 오케스트레이션**: 복잡한 작업의 단계별 실행\n\n### 설치 방법\n\n#### 기본 설치\n```bash\npython3 -m SuperClaude install\n```\n\n#### 설치 옵션\n```bash\n# 대화형 설치 (구성 요소 선택 가능)\nSuperClaude install --interactive\n\n# 개발자용 전체 설치\nSuperClaude install --profile developer\n\n# 최소 설치 (핵심 기능만)\nSuperClaude install --minimal\n\n# 시스템 진단\nSuperClaude install --diagnose\n```\n\n### 설치 확인\n```bash\n# 설치 검증\npython3 -c \"from setup.operations.install import validate_system_requirements\"\n\n# 컴포넌트 검증\npython3 -c \"from setup.components.core import CoreComponent; c = CoreComponent(); print(c.validate_installation())\"\n```\n\n---\n\n## 핵심 명령어 활용법\n\nSuperClaude는 개발 워크플로우의 모든 측면을 커버하는 16개의 전문 명령어를 제공합니다. 모든 명령어는 `/sc:` 접두사를 사용합니다.\n\n### 개발 명령어\n\n#### `/sc:implement` - 기능 구현\n가장 강력한 명령어 중 하나로, 새로운 기능이나 컴포넌트를 구현합니다.\n\n**기본 사용법:**\n```bash\n/sc:implement 사용자 인증 시스템\n/sc:implement 댓글 기능 추가\n/sc:implement --type component --framework react 모달 컴포넌트\n```\n\n**주요 플래그:**\n- `--type`: component, api, service, feature\n- `--framework`: react, vue, angular, express 등\n- `--wave-mode`: 복잡한 구현 시 단계별 실행\n\n**자동 활성화 기능:**\n- 프론트엔드 구현 시 → Frontend 페르소나 + Magic MCP 서버\n- 백엔드 구현 시 → Backend 페르소나 + Sequential MCP 서버\n- 보안 관련 구현 시 → Security 페르소나\n\n#### `/sc:build` - 프로젝트 빌드\n프로젝트 빌드와 컴파일을 담당합니다.\n\n**사용 예시:**\n```bash\n/sc:build                    # 전체 프로젝트 빌드\n/sc:build --target frontend  # 프론트엔드만 빌드\n/sc:build --optimize        # 최적화 빌드\n```\n\n#### `/sc:design` - 시스템 설계\n아키텍처와 디자인 패턴을 설계합니다.\n\n**사용 예시:**\n```bash\n/sc:design 마이크로서비스 아키텍처\n/sc:design --domain frontend 컴포넌트 시스템\n/sc:design --focus performance 고성능 캐싱 시스템\n```\n\n### 분석 명령어\n\n#### `/sc:analyze` - 코드 분석\n시스템의 다각적 분석을 수행합니다.\n\n**분석 유형:**\n```bash\n/sc:analyze                           # 전체 시스템 분석\n/sc:analyze --focus security         # 보안 중심 분석\n/sc:analyze --focus performance      # 성능 중심 분석\n/sc:analyze @src/components/         # 특정 디렉토리 분석\n/sc:analyze --think-hard             # 심화 분석 (10K 토큰)\n/sc:analyze --ultrathink             # 최대 심도 분석 (32K 토큰)\n```\n\n**자동 활성화:**\n- 복잡도 > 0.7 → Wave 모드 자동 활성화\n- 보안 키워드 감지 → Security 페르소나\n- 성능 이슈 감지 → Performance 페르소나\n\n#### `/sc:troubleshoot` - 문제 해결\n시스템적 문제 조사와 해결책 제시\n\n**사용 예시:**\n```bash\n/sc:troubleshoot 로그인이 안 됨\n/sc:troubleshoot --symptoms \"페이지 로딩 느림\"\n/sc:troubleshoot --focus database\n```\n\n#### `/sc:explain` - 설명과 교육\n코드나 시스템에 대한 교육적 설명\n\n**사용 예시:**\n```bash\n/sc:explain React hooks 사용법\n/sc:explain --detailed JWT 인증 프로세스\n/sc:explain @src/auth/jwt.js\n```\n\n### 품질 개선 명령어\n\n#### `/sc:improve` - 코드 개선\n증거 기반 코드 품질 향상\n\n**개선 유형:**\n```bash\n/sc:improve                      # 전체 품질 개선\n/sc:improve --focus performance  # 성능 최적화\n/sc:improve --focus security     # 보안 강화\n/sc:improve --focus quality      # 코드 품질\n/sc:improve --loop              # 반복적 개선\n```\n\n**Wave 모드 활용:**\n```bash\n/sc:improve --wave-mode progressive    # 점진적 개선\n/sc:improve --wave-strategy systematic # 체계적 개선\n```\n\n#### `/sc:cleanup` - 기술 부채 정리\n체계적인 코드 정리와 리팩토링\n\n**사용 예시:**\n```bash\n/sc:cleanup                    # 전체 정리\n/sc:cleanup --focus debt      # 기술 부채 중심\n/sc:cleanup @src/legacy/      # 특정 디렉토리\n```\n\n#### `/sc:test` - 테스트 워크플로우\n포괄적인 테스트 전략과 실행\n\n**테스트 유형:**\n```bash\n/sc:test                    # 전체 테스트\n/sc:test --type unit       # 단위 테스트\n/sc:test --type e2e        # E2E 테스트\n/sc:test --type benchmark  # 성능 테스트\n```\n\n### 문서화 명령어\n\n#### `/sc:document` - 문서 생성\n전문적인 문서 작성과 현지화\n\n**사용 예시:**\n```bash\n/sc:document API 명세서\n/sc:document --type guide 사용자 가이드\n/sc:document --persona-scribe=ko 한국어 문서\n```\n\n### 메타 명령어\n\n#### `/sc:task` - 프로젝트 관리\n장기간 프로젝트 관리와 추적\n\n**사용 예시:**\n```bash\n/sc:task 사용자 대시보드 개발\n/sc:task --estimate 개발 기간 산정\n/sc:task --track 진행 상황 추적\n```\n\n#### `/sc:spawn` - 작업 오케스트레이션\n복잡한 다단계 작업 조율\n\n**사용 예시:**\n```bash\n/sc:spawn 전체 시스템 현대화\n/sc:spawn --parallel 병렬 처리\n/sc:spawn --coordinate 서버 간 조율\n```\n\n#### `/sc:index` - 명령어 카탈로그\n사용 가능한 명령어와 기능 탐색\n\n**사용 예시:**\n```bash\n/sc:index performance      # 성능 관련 명령어\n/sc:index --category dev   # 개발 카테고리\n```\n\n#### `/sc:load` - 프로젝트 컨텍스트 로딩\n프로젝트 전체 컨텍스트 이해\n\n**사용 예시:**\n```bash\n/sc:load @monorepo/        # 모노레포 전체\n/sc:load --focus backend   # 백엔드 중심\n```\n\n---\n\n## 페르소나 시스템 활용\n\nSuperClaude의 페르소나 시스템은 11개의 전문화된 AI 행동 패턴을 제공하여 도메인별 최적화된 결과를 제공합니다.\n\n### 기술 전문가 페르소나\n\n#### `--persona-architect` - 시스템 아키텍트\n**특징:** 장기적 사고, 확장성 중심, 시스템 전체 관점\n\n**자동 활성화:**\n- \"architecture\", \"design\", \"scalability\" 키워드\n- 복잡한 시스템 수정\n- 아키텍처 복잡도 포함 추정 요청\n\n**우선순위:** 장기 유지보수성 > 확장성 > 성능 > 단기 이익\n\n**최적화된 명령어:**\n```bash\n/sc:analyze --persona-architect    # 아키텍처 관점 분석\n/sc:design --persona-architect     # 시스템 설계\n/sc:estimate --persona-architect   # 아키텍처 복잡도 고려 추정\n```\n\n**품질 기준:**\n- 유지보수성: 이해하고 수정 가능한 솔루션\n- 확장성: 성장과 부하 증가 수용\n- 모듈성: 느슨한 결합, 높은 응집도\n\n#### `--persona-frontend` - UX 전문가\n**특징:** 사용자 경험 우선, 접근성 옹호, 성능 인식\n\n**성능 예산:**\n- 로딩 시간: 3G에서 <3초, WiFi에서 <1초\n- 번들 크기: 초기 <500KB, 전체 <2MB\n- 접근성: WCAG 2.1 AA 최소 90%+\n- Core Web Vitals: LCP <2.5초, FID <100ms, CLS <0.1\n\n**자동 활성화:**\n- \"component\", \"responsive\", \"accessibility\" 키워드\n- 디자인 시스템 작업\n- 프론트엔드 개발\n\n**최적화된 명령어:**\n```bash\n/sc:build --persona-frontend       # UI 빌드 최적화\n/sc:improve --perf --persona-frontend  # 프론트엔드 성능\n/sc:test e2e --persona-frontend    # 사용자 워크플로우 테스트\n```\n\n#### `--persona-backend` - 안정성 엔지니어\n**특징:** 안정성 우선, API 전문가, 데이터 무결성 중심\n\n**안정성 예산:**\n- 가동 시간: 99.9% (연간 8.7시간 다운타임)\n- 오류율: 중요 작업 <0.1%\n- 응답 시간: API 호출 <200ms\n- 복구 시간: 중요 서비스 <5분\n\n**우선순위:** 안정성 > 보안 > 성능 > 기능 > 편의성\n\n**최적화된 명령어:**\n```bash\n/sc:build --api --persona-backend     # API 설계 및 백엔드 빌드\n/sc:implement --type api --persona-backend  # API 구현\n```\n\n#### `--persona-security` - 위협 모델링 전문가\n**특징:** 보안 우선, 컴플라이언스 전문가, 취약점 전문가\n\n**위협 평가 매트릭스:**\n- 위협 수준: Critical(즉시), High(24h), Medium(7일), Low(30일)\n- 공격 표면: 외부 노출(100%), 내부(70%), 격리(40%)\n- 데이터 민감도: PII/금융(100%), 비즈니스(80%), 공개(30%)\n\n**우선순위:** 보안 > 컴플라이언스 > 안정성 > 성능 > 편의성\n\n**최적화된 명령어:**\n```bash\n/sc:analyze --focus security --persona-security\n/sc:improve --security --persona-security\n```\n\n#### `--persona-performance` - 최적화 전문가\n**특징:** 측정 기반, 병목 제거, 메트릭 중심\n\n**성능 예산:**\n- 로딩 시간: 3G <3초, WiFi <1초, API <500ms\n- 번들 크기: 초기 <500KB, 전체 <2MB, 컴포넌트당 <50KB\n- 메모리 사용: 모바일 <100MB, 데스크톱 <500MB\n- CPU 사용: 평균 <30%, 60fps용 피크 <80%\n\n**우선순위:** 측정 우선 > 중요 경로 최적화 > 사용자 경험 > 성급한 최적화 방지\n\n**최적화된 명령어:**\n```bash\n/sc:improve --perf --persona-performance\n/sc:analyze --focus performance --persona-performance\n/sc:test --benchmark --persona-performance\n```\n\n### 프로세스 & 품질 전문가\n\n#### `--persona-analyzer` - 근본 원인 전문가\n**특징:** 증거 기반, 체계적 조사, 근본 원인 중심\n\n**조사 방법론:**\n- 증거 수집: 가설 형성 전 모든 데이터 수집\n- 패턴 인식: 데이터 내 상관관계와 이상 징후 식별\n- 가설 검증: 잠재적 원인 체계적 검증\n- 근본 원인 검증: 재현 가능한 테스트로 근본 원인 확인\n\n**우선순위:** 증거 > 체계적 접근 > 철저함 > 속도\n\n**최적화된 명령어:**\n```bash\n/sc:analyze --persona-analyzer          # 체계적, 증거 기반 분석\n/sc:troubleshoot --persona-analyzer     # 근본 원인 식별\n/sc:explain --detailed --persona-analyzer  # 증거 기반 설명\n```\n\n#### `--persona-qa` - 품질 옹호자\n**특징:** 예방 중심, 테스트 전문가, 엣지 케이스 탐정\n\n**품질 위험 평가:**\n- 중요 경로 분석: 필수 사용자 여정과 비즈니스 프로세스 식별\n- 실패 영향: 다양한 실패 유형의 결과 평가\n- 결함 확률: 컴포넌트별 결함률 과거 데이터\n- 복구 난이도: 배포 후 문제 수정 노력\n\n**우선순위:** 예방 > 탐지 > 수정 > 포괄적 커버리지\n\n**최적화된 명령어:**\n```bash\n/sc:test --persona-qa                   # 포괄적 테스트 전략\n/sc:troubleshoot --persona-qa           # 품질 문제 조사\n/sc:analyze --focus quality --persona-qa\n```\n\n#### `--persona-refactorer` - 코드 품질 전문가\n**특징:** 단순성 우선, 유지보수성, 클린 코드 옹호\n\n**코드 품질 메트릭:**\n- 복잡도 점수: 순환 복잡도, 인지 복잡도, 중첩 깊이\n- 유지보수성 지수: 가독성, 문서화 커버리지, 일관성\n- 기술 부채 비율: 문제 수정 예상 시간 vs 개발 시간\n- 테스트 커버리지: 단위 테스트, 통합 테스트, 문서 예제\n\n**우선순위:** 단순성 > 유지보수성 > 가독성 > 성능 > 영리함\n\n**최적화된 명령어:**\n```bash\n/sc:improve --quality --persona-refactorer  # 코드 품질과 유지보수성\n/sc:cleanup --persona-refactorer            # 체계적 기술 부채 감소\n```\n\n#### `--persona-devops` - 인프라 전문가\n**특징:** 자동화, 관찰가능성, 안정성 엔지니어링\n\n**인프라 자동화 전략:**\n- 배포 자동화: 무중단 배포, 자동 롤백\n- 구성 관리: 코드형 인프라, 버전 제어\n- 모니터링 통합: 자동 모니터링, 알림 설정\n- 스케일링 정책: 성능 메트릭 기반 자동 스케일링\n\n**우선순위:** 자동화 > 관찰가능성 > 안정성 > 확장성 > 수동 프로세스\n\n### 지식 & 커뮤니케이션 전문가\n\n#### `--persona-mentor` - 지식 전수 전문가\n**특징:** 교육 중심, 지식 전수, 문서화 옹호\n\n**학습 경로 최적화:**\n- 기술 평가: 현재 지식 수준과 학습 목표 평가\n- 점진적 스캐폴딩: 적절한 복잡도로 이해 단계적 구축\n- 학습 스타일 적응: 사용자 선호도에 따른 교육 접근법 조정\n- 지식 보존: 예제와 실습으로 핵심 개념 강화\n\n**우선순위:** 이해 > 지식 전수 > 교육 > 작업 완료\n\n**최적화된 명령어:**\n```bash\n/sc:explain --persona-mentor            # 포괄적 교육 설명\n/sc:document --persona-mentor           # 교육용 문서와 가이드\n/sc:index --persona-mentor              # 복잡한 시스템 이해\n```\n\n#### `--persona-scribe=lang` - 전문 작가\n**특징:** 전문 작가, 문서화 전문가, 현지화 전문가, 문화적 커뮤니케이션 어드바이저\n\n**언어 지원:** en(기본), es, fr, de, ja, zh, pt, it, ru, ko\n\n**콘텐츠 유형:** 기술 문서, 사용자 가이드, 위키, PR 콘텐츠, 커밋 메시지, 현지화\n\n**청중 분석 프레임워크:**\n- 경험 수준: 기술 전문성, 도메인 지식, 도구 친숙도\n- 문화적 맥락: 언어 선호도, 커뮤니케이션 규범, 문화적 민감성\n- 목적 맥락: 학습, 참조, 구현, 문제 해결\n- 시간 제약: 자세한 탐구 vs 빠른 참조\n\n**우선순위:** 명확성 > 청중 요구 > 문화적 민감성 > 완전성 > 간결성\n\n**최적화된 명령어:**\n```bash\n/sc:document --persona-scribe=ko        # 한국어 전문 문서\n/sc:explain --persona-scribe=en         # 청중 맞춤 설명\n/sc:git --persona-scribe=ko             # 전문 커밋 메시지\n```\n\n### 페르소나 협업 패턴\n\n**상호 보완적 협업:**\n- architect + performance: 성능 예산을 고려한 시스템 설계\n- security + backend: 위협 모델링을 포함한 안전한 서버사이드 개발\n- frontend + qa: 접근성과 성능을 고려한 사용자 중심 개발\n- mentor + scribe: 문화적 적응을 포함한 교육 콘텐츠 작성\n- analyzer + refactorer: 근본 원인 분석과 체계적 코드 개선\n\n---\n\n## 플래그 시스템 마스터하기\n\nSuperClaude의 플래그 시스템은 세밀한 실행 제어와 최적화를 제공합니다. 자동 활성화와 충돌 해결 기능이 내장되어 있습니다.\n\n### 기획 & 분석 플래그\n\n#### `--plan`\n실행 전 계획 표시\n```bash\n/sc:implement --plan 사용자 인증 시스템\n# → 도구, 출력, 단계 순서 미리 확인\n```\n\n#### `--think` / `--think-hard` / `--ultrathink`\n분석 깊이 제어\n\n**`--think` (4K 토큰)**\n- 다중 파일 분석\n- Sequential MCP 자동 활성화\n- 자동 활성화: 임포트 체인 >5파일, 모듈 간 호출 >10개\n\n```bash\n/sc:analyze --think @src/components/\n```\n\n**`--think-hard` (10K 토큰)**\n- 깊은 아키텍처 분석\n- 시스템 전체 의존성 분석\n- 자동 활성화: 시스템 리팩토링, 병목 >3모듈, 보안 취약점\n\n```bash\n/sc:analyze --think-hard 레거시 시스템\n```\n\n**`--ultrathink` (32K 토큰)**\n- 중요 시스템 재설계 분석\n- 복잡한 문제에 대한 최대 심도 분석\n- 자동 활성화: 레거시 현대화, 중요 취약점, 성능 저하 >50%\n\n```bash\n/sc:analyze --ultrathink --all-mcp 엔터프라이즈 시스템\n```\n\n### 압축 & 효율성 플래그\n\n#### `--uc` / `--ultracompressed`\n30-50% 토큰 절약\n- 기호와 구조화된 출력 사용\n- 자동 활성화: 컨텍스트 사용량 >75% 또는 대규모 작업\n- 자동 생성 기호 범례, 기술적 정확성 유지\n\n```bash\n/sc:analyze --uc 대규모_프로젝트/\n```\n\n#### `--validate`\n사전 작업 검증과 위험 평가\n- 자동 활성화: 위험 점수 >0.7 또는 리소스 사용량 >75%\n- 위험 알고리즘: 복잡도*0.3 + 취약점*0.25 + 리소스*0.2 + 실패확률*0.15 + 시간*0.1\n\n```bash\n/sc:implement --validate 결제 시스템\n```\n\n#### `--safe-mode`\n최대 검증, 보수적 실행\n- 자동 활성화: 리소스 사용량 >85% 또는 프로덕션 환경\n- 검증 체크 활성화, --uc 모드 강제, 위험 작업 차단\n\n```bash\n/sc:deploy --safe-mode production\n```\n\n### MCP 서버 제어 플래그\n\n#### `--c7` / `--context7`\n라이브러리 문서 조회\n- 자동 활성화: 외부 라이브러리 임포트, 프레임워크 질문\n- 워크플로우: 라이브러리 ID 해결 → 라이브러리 문서 조회 → 구현\n\n```bash\n/sc:implement --c7 React 컴포넌트\n```\n\n#### `--seq` / `--sequential`\n복잡한 다단계 분석\n- 자동 활성화: 복잡한 디버깅, 시스템 설계, --think 플래그\n- 탐지: debug/trace/analyze 키워드, 중첩 조건문, 비동기 체인\n\n```bash\n/sc:troubleshoot --seq 성능 병목\n```\n\n#### `--magic`\nUI 컴포넌트 생성\n- 자동 활성화: UI 컴포넌트 요청, 디자인 시스템 쿼리\n- 탐지: component/button/form 키워드, JSX 패턴, 접근성 요구사항\n\n```bash\n/sc:implement --magic 반응형 모달\n```\n\n#### `--play` / `--playwright`\n크로스 브라우저 자동화와 E2E 테스트\n- 탐지: test/e2e 키워드, 성능 모니터링, 시각적 테스트\n\n```bash\n/sc:test --play e2e 사용자_워크플로우\n```\n\n#### `--all-mcp` / `--no-mcp`\n모든 MCP 서버 활성화/비활성화\n- `--all-mcp`: 문제 복잡도 >0.8, 다중 도메인 지표 시 자동 활성화\n- `--no-mcp`: 40-60% 더 빠른 실행, WebSearch 대체\n\n```bash\n/sc:analyze --all-mcp 복합_시스템/\n/sc:build --no-mcp --fast\n```\n\n### 서브 에이전트 위임 플래그\n\n#### `--delegate [files|folders|auto]`\n병렬 처리를 위한 서브 에이전트 위임\n- **files**: 개별 파일 분석을 서브 에이전트에 위임\n- **folders**: 디렉토리 수준 분석을 서브 에이전트에 위임\n- **auto**: 범위와 복잡도에 따른 자동 위임 전략 감지\n- 자동 활성화: >7개 디렉토리 또는 >50개 파일\n- 적합한 작업에서 40-70% 시간 절약\n\n```bash\n/sc:analyze --delegate auto 대규모_모노레포/\n/sc:improve --delegate files src/components/\n```\n\n#### `--concurrency [n]`\n최대 동시 서브 에이전트와 작업 제어\n- 기본값: 7, 범위: 1-15\n- 리소스와 복잡도에 따른 동적 할당\n\n```bash\n/sc:load --delegate --concurrency 10 enterprise_project/\n```\n\n### Wave 오케스트레이션 플래그\n\n#### `--wave-mode [auto|force|off]`\nWave 오케스트레이션 활성화 제어\n- **auto**: 복잡도 >0.8 AND 파일수 >20 AND 작업유형 >2 시 자동 활성화\n- **force**: 자동 감지 무시하고 경계선 케이스에 대해 강제 활성화\n- **off**: Wave 모드 비활성화, 대신 서브 에이전트 위임 사용\n\n```bash\n/sc:improve --wave-mode force 레거시_시스템/\n/sc:analyze --wave-mode off --delegate 단순_분석/\n```\n\n#### `--wave-strategy [progressive|systematic|adaptive|enterprise]`\nWave 오케스트레이션 전략 선택\n- **progressive**: 점진적 개선을 위한 반복적 향상\n- **systematic**: 복잡한 문제를 위한 포괄적 체계적 분석\n- **adaptive**: 다양한 복잡도에 따른 동적 구성\n- **enterprise**: >100파일, >0.7 복잡도의 대규모 오케스트레이션\n\n```bash\n/sc:improve --wave-strategy progressive 점진적_개선/\n/sc:analyze --wave-strategy enterprise 대기업_시스템/\n```\n\n### 범위 & 포커스 플래그\n\n#### `--scope [level]`\n분석 범위 지정\n- **file**: 단일 파일 분석\n- **module**: 모듈/디렉토리 수준\n- **project**: 전체 프로젝트 범위\n- **system**: 시스템 전체 분석\n\n```bash\n/sc:analyze --scope system\n/sc:improve --scope module @src/auth/\n```\n\n#### `--focus [domain]`\n특정 도메인 집중\n- **performance**: 성능 최적화\n- **security**: 보안 분석과 강화\n- **quality**: 코드 품질과 유지보수성\n- **architecture**: 시스템 설계와 구조\n- **accessibility**: UI/UX 접근성 준수\n- **testing**: 테스트 커버리지와 품질\n\n```bash\n/sc:analyze --focus security 인증_시스템/\n/sc:improve --focus performance --loop\n```\n\n### 반복 개선 플래그\n\n#### `--loop`\n반복 개선 모드 활성화\n- 자동 활성화: 품질 개선 요청, 정제 작업, 다듬기 작업\n- 호환 명령어: /sc:improve, /refine, /enhance, /fix, /cleanup, /analyze\n- 기본값: 자동 검증이 포함된 3회 반복\n\n```bash\n/sc:improve --loop --iterations 5 코드_품질/\n/sc:cleanup --loop --interactive 레거시_코드/\n```\n\n#### `--iterations [n]`\n개선 사이클 수 제어\n- 기본값: 3, 범위: 1-10\n- 작업 복잡도에 따른 지능적 기본값 재정의\n\n#### `--interactive`\n반복 간 사용자 확인 활성화\n- 각 사이클 전 검토와 승인을 위한 일시 정지\n- 수동 안내와 과정 수정 허용\n\n### 내성적 & 투명성 플래그\n\n#### `--introspect` / `--introspection`\n사고 과정을 노출하는 깊은 투명성 모드\n- 자동 활성화: SuperClaude 프레임워크 작업, 복잡한 디버깅\n- 투명성 마커: 🤔 사고, 🎯 결정, ⚡ 행동, 📊 확인, 💡 학습\n- 공유된 불확실성과 대화식 반영\n\n```bash\n/sc:analyze --introspect 복잡한_버그/\n/sc:troubleshoot --introspection 시스템_장애/\n```\n\n### 플래그 우선순위 규칙\n\n1. 안전 플래그 (--safe-mode) > 최적화 플래그\n2. 명시적 플래그 > 자동 활성화\n3. 사고 깊이: --ultrathink > --think-hard > --think\n4. --no-mcp가 모든 개별 MCP 플래그 재정의\n5. 범위: system > project > module > file\n6. 마지막 지정 페르소나가 우선\n7. Wave 모드: --wave-mode off > --wave-mode force > --wave-mode auto\n8. 서브 에이전트 위임: 명시적 --delegate > 자동 감지\n9. 루프 모드: 명시적 --loop > 정제 키워드 기반 자동 감지\n10. --uc 자동 활성화가 장황한 플래그 재정의\n\n---\n\n## MCP 서버 통합 활용\n\nSuperClaude는 4개의 MCP 서버와 통합되어 전문적인 기능을 제공합니다.\n\n### Context7 서버 - 문서 & 연구\n\n**목적:** 공식 라이브러리 문서, 코드 예제, 모범 사례, 현지화 표준\n\n**자동 활성화 패턴:**\n- 외부 라이브러리 임포트 감지\n- 프레임워크별 질문\n- Scribe 페르소나 활성화 시\n\n**워크플로우 프로세스:**\n1. 라이브러리 감지: 임포트, 의존성, package.json에서 라이브러리 참조 스캔\n2. ID 해결: `resolve-library-id`로 Context7 호환 라이브러리 ID 찾기\n3. 문서 검색: 특정 주제 중심으로 `get-library-docs` 호출\n4. 패턴 추출: 관련 코드 패턴과 구현 예제 추출\n5. 구현: 적절한 출처와 버전 호환성으로 패턴 적용\n\n**활용 예시:**\n```bash\n/sc:implement --c7 React hooks를 사용한 상태 관리\n/sc:document --c7 --persona-scribe=ko Express.js API 가이드\n/sc:explain --c7 Vue 3 Composition API\n```\n\n**오류 복구:**\n- 라이브러리 없음 → WebSearch 대안 → 수동 구현\n- 문서 시간 초과 → 캐시된 지식 사용 → 제한사항 표시\n- 서버 사용 불가 → 백업 Context7 인스턴스 → 우아한 성능 저하\n\n### Sequential 서버 - 복잡한 분석 & 사고\n\n**목적:** 다단계 문제 해결, 아키텍처 분석, 체계적 디버깅\n\n**자동 활성화 패턴:**\n- 복잡한 디버깅 시나리오\n- 시스템 설계 질문\n- `--think` 플래그 사용\n\n**워크플로우 프로세스:**\n1. 문제 분해: 복잡한 문제를 분석 가능한 구성 요소로 분해\n2. 서버 조정: Context7(문서), Magic(UI 인사이트), Playwright(테스트)와 조정\n3. 체계적 분석: 각 구성 요소에 구조화된 사고 적용\n4. 관계 매핑: 의존성, 상호작용, 피드백 루프 식별\n5. 가설 생성: 각 구성 요소에 대한 테스트 가능한 가설 생성\n6. 증거 수집: 도구 사용을 통한 지원 증거 수집\n7. 다중 서버 종합: 여러 서버의 발견사항 결합\n8. 권장사항 생성: 우선순위 순서로 실행 가능한 다음 단계 제공\n\n**사용 사례:**\n```bash\n/sc:troubleshoot --seq 복잡한_버그_근본원인_분석\n/sc:analyze --think-hard --seq 아키텍처_검토\n/sc:improve --seq --loop 성능_병목_식별\n```\n\n**사고 모드와의 통합:**\n- `--think` (4K): 컨텍스트 인식이 있는 모듈 수준 분석\n- `--think-hard` (10K): 아키텍처 중심 시스템 전체 분석\n- `--ultrathink` (32K): 포괄적 커버리지를 가진 중요 시스템 분석\n\n### Magic 서버 - UI 컴포넌트 & 디자인\n\n**목적:** 현대적 UI 컴포넌트 생성, 디자인 시스템 통합, 반응형 디자인\n\n**자동 활성화 패턴:**\n- UI 컴포넌트 요청\n- 디자인 시스템 쿼리\n- Frontend 페르소나 활성화\n\n**워크플로우 프로세스:**\n1. 요구사항 파싱: 컴포넌트 명세와 디자인 시스템 요구사항 추출\n2. 패턴 검색: 21st.dev 데이터베이스에서 유사한 컴포넌트와 디자인 패턴 찾기\n3. 프레임워크 감지: 대상 프레임워크(React, Vue, Angular)와 버전 식별\n4. 서버 조정: 프레임워크 패턴을 위한 Context7, 복잡한 로직을 위한 Sequential과 동기화\n5. 코드 생성: 현대적 모범 사례와 프레임워크 규칙으로 컴포넌트 생성\n6. 디자인 시스템 통합: 기존 테마, 스타일, 토큰, 디자인 패턴 적용\n7. 접근성 준수: WCAG 준수, 시맨틱 마크업, 키보드 내비게이션 보장\n8. 반응형 디자인: 모바일 우선 반응형 패턴 구현\n9. 최적화: 성능 최적화와 코드 분할 적용\n\n**컴포넌트 카테고리:**\n- **대화형**: 버튼, 폼, 모달, 드롭다운, 내비게이션, 검색 컴포넌트\n- **레이아웃**: 그리드, 컨테이너, 카드, 패널, 사이드바, 헤더, 푸터\n- **디스플레이**: 타이포그래피, 이미지, 아이콘, 차트, 테이블, 리스트, 미디어\n- **피드백**: 알림, 알림, 진행 표시기, 툴팁, 로딩 상태\n- **입력**: 텍스트 필드, 선택기, 날짜 선택기, 파일 업로드, 리치 텍스트 에디터\n\n**활용 예시:**\n```bash\n/sc:implement --magic 반응형_대시보드_컴포넌트\n/sc:design --magic 디자인_시스템_토큰\n/sc:improve --magic --persona-frontend 접근성_개선\n```\n\n### Playwright 서버 - 브라우저 자동화 & 테스트\n\n**목적:** 크로스 브라우저 E2E 테스트, 성능 모니터링, 자동화, 시각적 테스트\n\n**자동 활성화 패턴:**\n- 테스트 워크플로우\n- 성능 모니터링 요청\n- E2E 테스트 생성\n- QA 페르소나 활성화\n\n**워크플로우 프로세스:**\n1. 브라우저 연결: Chrome, Firefox, Safari, Edge 인스턴스에 연결\n2. 환경 설정: 뷰포트, 사용자 에이전트, 네트워크 조건, 디바이스 에뮬레이션 구성\n3. 내비게이션: 적절한 대기와 오류 처리로 대상 URL 탐색\n4. 서버 조정: 테스트 계획을 위한 Sequential, UI 검증을 위한 Magic과 동기화\n5. 상호작용: 브라우저 전반에 걸친 사용자 액션(클릭, 폼 채우기, 내비게이션) 수행\n6. 데이터 수집: 스크린샷, 비디오, 성능 메트릭, 콘솔 로그 캡처\n7. 검증: 예상 동작, 시각적 상태, 성능 임계값 확인\n8. 다중 서버 분석: 포괄적 테스트 분석을 위한 다른 서버와 조정\n9. 리포팅: 증거, 메트릭, 실행 가능한 인사이트로 테스트 리포트 생성\n\n**기능:**\n- **다중 브라우저 지원**: 일관된 API로 Chrome, Firefox, Safari, Edge\n- **시각적 테스트**: 스크린샷 캡처, 시각적 회귀 감지, 반응형 테스트\n- **성능 메트릭**: 로딩 시간, 렌더링 성능, 리소스 사용량, Core Web Vitals\n- **사용자 시뮬레이션**: 실제 사용자 상호작용 패턴, 접근성 테스트, 폼 워크플로우\n\n**활용 예시:**\n```bash\n/sc:test --play e2e 사용자_등록_워크플로우\n/sc:analyze --play 성능_모니터링 웹앱\n/sc:improve --play --persona-performance 로딩_최적화\n```\n\n### 서버 오케스트레이션 패턴\n\n**다중 서버 조정:**\n- 작업 분산: 기능에 따른 서버 간 지능적 작업 분할\n- 의존성 관리: 서버 간 의존성과 데이터 흐름 처리\n- 동기화: 통합 솔루션을 위한 서버 응답 조정\n- 로드 밸런싱: 서버 성능과 용량에 따른 워크로드 분산\n\n**캐싱 전략:**\n- Context7 캐시: 버전 인식 캐싱을 통한 문서 조회\n- Sequential 캐시: 패턴 매칭을 통한 분석 결과\n- Magic 캐시: 디자인 시스템 버전 관리를 통한 컴포넌트 패턴\n- Playwright 캐시: 환경별 캐싱을 통한 테스트 결과와 스크린샷\n\n**조합 사용 예시:**\n```bash\n# 모든 서버 활용한 포괄적 분석\n/sc:analyze --all-mcp --ultrathink 엔터프라이즈_시스템/\n\n# UI 컴포넌트 구현과 테스트\n/sc:implement --magic 모달_컴포넌트 && /sc:test --play e2e 모달_테스트\n\n# 문서 기반 구현과 검증\n/sc:implement --c7 --seq Next.js_API && /sc:test --play api_테스트\n```\n\n---\n\n## 실전 활용 시나리오\n\n실제 개발 상황에서 SuperClaude를 효과적으로 활용하는 구체적인 시나리오들을 살펴보겠습니다.\n\n### 시나리오 1: 새로운 기능 구현\n\n**상황:** React 기반 웹 애플리케이션에 사용자 대시보드 기능을 추가해야 함\n\n**단계별 접근:**\n\n1. **프로젝트 컨텍스트 이해**\n```bash\n/sc:load @src/ --focus frontend\n```\n→ Frontend 페르소나 자동 활성화, 프로젝트 구조 파악\n\n2. **기능 설계**\n```bash\n/sc:design 사용자 대시보드 --persona-architect --c7\n```\n→ 아키텍처 설계 + React 패턴 문서 참조\n\n3. **컴포넌트 구현**\n```bash\n/sc:implement --magic 대시보드_컴포넌트 --type component --framework react\n```\n→ Magic 서버로 현대적 React 컴포넌트 생성\n\n4. **API 통합**\n```bash\n/sc:implement --persona-backend 대시보드_API_연동 --type api\n```\n→ Backend 페르소나로 안정적인 API 통합\n\n5. **테스트 작성**\n```bash\n/sc:test --play e2e 대시보드_워크플로우\n```\n→ Playwright로 E2E 테스트 자동 생성\n\n6. **성능 최적화**\n```bash\n/sc:improve --focus performance --persona-performance 대시보드/\n```\n→ 성능 전문가 관점에서 최적화\n\n**예상 결과:**\n- 완전히 기능하는 React 대시보드 컴포넌트\n- API 통합과 상태 관리\n- 포괄적인 E2E 테스트\n- 성능 최적화된 코드\n- 접근성 준수 UI\n\n### 시나리오 2: 레거시 코드 현대화\n\n**상황:** 5년 된 jQuery 기반 프론트엔드를 React로 현대화\n\n**Wave 모드 활용:**\n```bash\n/sc:analyze --wave-mode auto --ultrathink @legacy/frontend/\n```\n→ 복잡도 자동 감지하여 Wave 모드 활성화\n\n**Wave 전략 실행:**\n```bash\n/sc:improve --wave-strategy systematic --wave-delegation folders legacy/\n```\n\n**Wave 단계별 진행:**\n1. **Wave 1: 분석** (Analyzer 페르소나)\n   - 레거시 코드 구조 분석\n   - 의존성 매핑\n   - 마이그레이션 위험 평가\n\n2. **Wave 2: 계획** (Architect 페르소나)\n   - 현대화 전략 수립\n   - 컴포넌트 분해 계획\n   - 단계별 마이그레이션 로드맵\n\n3. **Wave 3: 구현** (Frontend 페르소나)\n   - React 컴포넌트 변환\n   - 상태 관리 현대화\n   - 라우팅 시스템 업그레이드\n\n4. **Wave 4: 검증** (QA 페르소나)\n   - 기능 동등성 테스트\n   - 성능 비교 분석\n   - 사용자 경험 검증\n\n5. **Wave 5: 최적화** (Performance 페르소나)\n   - 번들 크기 최적화\n   - 로딩 성능 개선\n   - Core Web Vitals 최적화\n\n**예상 결과:**\n- 체계적이고 안전한 레거시 현대화\n- 단계별 검증과 롤백 가능성\n- 성능 향상과 유지보수성 개선\n- 포괄적인 테스트 커버리지\n\n### 시나리오 3: 성능 병목 해결\n\n**상황:** 웹 애플리케이션의 로딩 속도가 느려서 사용자 불만 증가\n\n**성능 중심 접근:**\n\n1. **성능 분석**\n```bash\n/sc:analyze --focus performance --persona-performance --play\n```\n→ Performance 페르소나 + Playwright 서버로 실제 성능 측정\n\n2. **병목 지점 식별**\n```bash\n/sc:troubleshoot --seq \"페이지 로딩 속도 저하\" --think-hard\n```\n→ Sequential 서버로 체계적 근본 원인 분석\n\n3. **최적화 구현**\n```bash\n/sc:improve --focus performance --loop --iterations 3\n```\n→ 반복적 성능 개선 (3회 사이클)\n\n4. **결과 검증**\n```bash\n/sc:test --play --benchmark 성능_테스트\n```\n→ 최적화 전후 성능 비교\n\n**구체적 최적화 영역:**\n- 이미지 최적화 및 지연 로딩\n- JavaScript 번들 분할\n- CSS 최적화 및 중요 경로 우선순위\n- 캐싱 전략 개선\n- 데이터베이스 쿼리 최적화\n\n### 시나리오 4: 보안 감사 및 강화\n\n**상황:** 금융 서비스 웹 애플리케이션의 보안 검토 필요\n\n**보안 중심 접근:**\n\n1. **보안 위험 평가**\n```bash\n/sc:analyze --focus security --persona-security --validate --ultrathink\n```\n→ Security 페르소나로 포괄적 위협 모델링\n\n2. **취약점 스캔**\n```bash\n/sc:troubleshoot --persona-security 보안_취약점 --seq\n```\n→ 체계적 취약점 식별과 위험도 평가\n\n3. **보안 강화 구현**\n```bash\n/sc:improve --focus security --persona-security --safe-mode\n```\n→ 안전 모드에서 보안 강화 조치\n\n4. **컴플라이언스 검증**\n```bash\n/sc:test --persona-qa 보안_컴플라이언스 --validate\n```\n→ 규정 준수 확인\n\n**주요 보안 영역:**\n- 인증 및 권한 부여 시스템\n- 데이터 암호화 및 보호\n- API 보안 (OWASP Top 10)\n- 세션 관리 및 CSRF 보호\n- 입력 검증 및 SQL 인젝션 방지\n\n### 시나리오 5: 국제화 및 현지화\n\n**상황:** 한국 시장 진출을 위한 다국어 지원 웹사이트 구축\n\n**현지화 전문 접근:**\n\n1. **현지화 전략 수립**\n```bash\n/sc:design --persona-scribe=ko 한국_시장_현지화_전략 --c7\n```\n→ Korean Scribe 페르소나로 문화적 맥락 고려\n\n2. **다국어 시스템 구현**\n```bash\n/sc:implement --c7 i18n_시스템 --framework react-i18next\n```\n→ Context7 서버로 i18n 라이브러리 패턴 참조\n\n3. **콘텐츠 현지화**\n```bash\n/sc:document --persona-scribe=ko 한국어_콘텐츠 --type guide\n```\n→ 문화적 적응과 현지 규범 고려\n\n4. **현지화 품질 검증**\n```bash\n/sc:test --play 다국어_UI_테스트 --persona-qa\n```\n→ 다양한 언어 환경에서 UI/UX 테스트\n\n**주요 현지화 영역:**\n- 텍스트 번역 및 문화적 적응\n- 날짜, 시간, 통화 형식\n- 읽기 방향 및 레이아웃 조정\n- 현지 결제 시스템 통합\n- 한국 웹 접근성 표준 준수\n\n### 시나리오 6: DevOps 파이프라인 구축\n\n**상황:** CI/CD 파이프라인과 인프라 자동화 구축\n\n**DevOps 중심 접근:**\n\n1. **인프라 설계**\n```bash\n/sc:design --persona-devops CI/CD_파이프라인 --focus infrastructure\n```\n→ DevOps 페르소나로 자동화 중심 설계\n\n2. **배포 스크립트 구현**\n```bash\n/sc:implement --persona-devops 자동_배포_시스템 --type service\n```\n→ 인프라 as 코드 방식 구현\n\n3. **모니터링 시스템**\n```bash\n/sc:implement --persona-devops 모니터링_대시보드 --seq\n```\n→ 관찰가능성 중심 모니터링\n\n4. **보안 강화**\n```bash\n/sc:improve --focus security --persona-security --persona-devops 배포_보안\n```\n→ Security + DevOps 페르소나 협업\n\n**주요 구축 영역:**\n- GitHub Actions/GitLab CI 파이프라인\n- Docker 컨테이너화\n- Kubernetes 오케스트레이션\n- 모니터링 및 로깅 (Prometheus, Grafana)\n- 보안 스캔 및 취약점 관리\n\n### 시나리오 7: 팀 협업 및 문서화\n\n**상황:** 새로운 팀원 온보딩과 프로젝트 문서화\n\n**교육 및 문서화 접근:**\n\n1. **프로젝트 가이드 작성**\n```bash\n/sc:document --persona-mentor --persona-scribe=ko 신입_개발자_가이드\n```\n→ Mentor + Scribe 페르소나 협업으로 교육적 문서\n\n2. **API 문서 생성**\n```bash\n/sc:document --c7 --persona-scribe=ko API_명세서 --type reference\n```\n→ Context7 서버로 표준 패턴 참조\n\n3. **코드 리뷰 가이드**\n```bash\n/sc:document --persona-mentor 코드_리뷰_가이드라인 --focus quality\n```\n→ 품질 중심 리뷰 프로세스\n\n4. **지식 전수 세션**\n```bash\n/sc:explain --persona-mentor --detailed 아키텍처_설계_원칙\n```\n→ 교육적 설명과 학습 지원\n\n**문서화 영역:**\n- 프로젝트 개요 및 아키텍처\n- 개발 환경 설정 가이드\n- API 사용법 및 예제\n- 코딩 표준 및 리뷰 가이드\n- 트러블슈팅 FAQ\n\n### 공통 성공 팁\n\n1. **적절한 페르소나 선택**: 작업 도메인에 맞는 페르소나 활용\n2. **MCP 서버 조합**: 복잡한 작업 시 여러 서버 조합 사용\n3. **플래그 조합**: 상황에 맞는 플래그 조합으로 최적화\n4. **반복적 개선**: --loop 플래그로 점진적 품질 향상\n5. **검증 중심**: --validate 플래그로 위험 최소화\n6. **문서화**: 작업 과정과 결과를 체계적으로 문서화\n\n---\n\n## 고급 팁과 트릭\n\nSuperClaude를 마스터하기 위한 고급 활용 기법들을 소개합니다.\n\n### 성능 최적화 전략\n\n#### 토큰 효율성 극대화\n```bash\n# 대규모 프로젝트 분석 시 자동 압축 활용\n/sc:analyze --uc @large_project/ --delegate auto\n# → 30-50% 토큰 절약 + 병렬 처리\n\n# 컨텍스트 사용량 모니터링하며 작업\n/sc:implement --plan feature_name\n# → 실행 전 토큰 사용량 예측\n```\n\n#### Wave 모드 최적화\n```bash\n# 복잡한 작업을 단계별로 최적화\n/sc:improve --wave-strategy adaptive --wave-delegation tasks\n# → 작업 유형별 전문 서브 에이전트 활용\n\n# 엔터프라이즈급 시스템 최적화\n/sc:analyze --wave-strategy enterprise --wave-validation\n# → 대규모 시스템용 특별 최적화\n```\n\n### 서브 에이전트 활용 고급 패턴\n\n#### 지능적 병렬 처리\n```bash\n# 파일별 병렬 분석으로 속도 향상\n/sc:analyze --delegate files --concurrency 10 @src/\n# → 40-70% 시간 절약\n\n# 폴더별 전문화 분석\n/sc:improve --delegate folders --focus-agents\n# → 디렉토리별 특화된 분석\n```\n\n#### 복합 위임 전략\n```bash\n# 혼합 범위에서 자동 최적화\n/sc:load --delegate auto @complex_monorepo/\n# → 시스템이 최적 위임 전략 자동 선택\n```\n\n### MCP 서버 조합의 예술\n\n#### 시너지 조합\n```bash\n# 완벽한 UI 구현: Magic + Context7 + Sequential\n/sc:implement --magic --c7 --seq 복잡한_대시보드_컴포넌트\n\n# 포괄적 성능 분석: Sequential + Playwright\n/sc:analyze --seq --play --focus performance 웹앱_성능\n\n# 보안 강화 구현: Context7 + Sequential (자동 활성화)\n/sc:improve --focus security 인증_시스템\n```\n\n#### 조건부 서버 활용\n```bash\n# 필요시에만 모든 서버 활용\n/sc:analyze --all-mcp 초복잡_시스템/ --ultrathink\n# → 복잡도 >0.8일 때만 모든 서버 활성화\n```\n\n### 페르소나 협업 마스터리\n\n#### 다중 페르소나 협업\n```bash\n# 아키텍트 + 성능 전문가 협업\n/sc:design --persona-architect 고성능_시스템 --focus performance\n# → 아키텍처 설계 시 성능 고려\n\n# 보안 + 백엔드 전문가 협업\n/sc:implement --persona-security --persona-backend 인증_API\n# → 보안 강화된 백엔드 구현\n```\n\n#### 컨텍스트별 페르소나 전환\n```bash\n# 단계별 전문가 활용\n/sc:analyze --persona-analyzer 문제_분석 && \\\n/sc:design --persona-architect 해결책_설계 && \\\n/sc:implement --persona-frontend UI_구현\n```\n\n### 플래그 조합의 고급 패턴\n\n#### 컨텍스트 적응형 플래그\n```bash\n# 위험도에 따른 자동 안전 모드\n/sc:implement --validate 결제_시스템\n# → 위험 점수 >0.7 시 자동으로 --safe-mode 활성화\n\n# 복잡도에 따른 자동 압축\necho \"대규모 프로젝트\" | /sc:analyze\n# → 컨텍스트 사용량 >75% 시 자동으로 --uc 활성화\n```\n\n#### 성능 프로파일 최적화\n```bash\n# 최적화 프로파일: 고성능 + 캐싱 + 병렬 실행\n/sc:build --optimize --cache --parallel\n\n# 표준 프로파일: 균형 잡힌 성능 + 적당한 리소스\n/sc:implement feature_name  # 기본값\n\n# 복잡 프로파일: 리소스 집약적 + 포괄적 분석\n/sc:analyze --ultrathink --all-mcp system/\n```\n\n### 반복 개선 마스터리\n\n#### 지능적 루프 전략\n```bash\n# 품질 중심 반복 개선\n/sc:improve --loop --focus quality --iterations 5 --interactive\n# → 각 단계에서 사용자 확인\n\n# 성능 중심 자동 반복\n/sc:improve --loop --focus performance --persona-performance\n# → 자동 3회 반복으로 성능 최적화\n```\n\n#### 조건부 반복\n```bash\n# 목표 달성까지 반복\n/sc:improve --loop --target \"성능 90점 이상\" --max-iterations 7\n# → 목표 달성 또는 최대 반복 횟수까지\n```\n\n### 에러 복구 및 대체 전략\n\n#### 우아한 성능 저하\n```bash\n# MCP 서버 장애 시 대체 전략\n/sc:implement feature_name --c7 || /sc:implement feature_name --no-mcp\n# → Context7 실패 시 WebSearch로 대체\n\n# 토큰 한계 대응\n/sc:analyze large_project/ --uc || /sc:analyze large_project/ --delegate auto\n# → 압축으로도 안 되면 위임으로 대체\n```\n\n#### 백업 전략\n```bash\n# 다중 접근법으로 안정성 확보\n/sc:implement --magic UI_component --fallback-to-manual\n# → Magic 서버 실패 시 수동 구현 가이드 제공\n```\n\n### 커스터마이징 고급 기법\n\n#### 프로젝트별 최적화\n```bash\n# 프로젝트 특성에 맞는 기본 설정\necho \"/sc:analyze --persona-frontend --magic --c7\" > .claude/project-defaults\n# → 프론트엔드 프로젝트용 기본 플래그\n```\n\n#### 워크플로우 자동화\n```bash\n# 복합 명령어 체인\nalias full-analysis=\"/sc:load project/ && /sc:analyze --ultrathink && /sc:improve --loop\"\n# → 프로젝트 로딩 → 심화 분석 → 반복 개선\n```\n\n### 디버깅 및 트러블슈팅\n\n#### 상세 진단\n```bash\n# 실행 과정 투명성 확보\n/sc:troubleshoot --introspect 복잡한_문제 --seq\n# → 사고 과정과 결정 근거 상세 노출\n\n# 플래그 충돌 진단\n/sc:analyze --plan --validate 프로젝트/\n# → 실행 전 플래그 호환성 검증\n```\n\n#### 성능 모니터링\n```bash\n# 리소스 사용량 모니터링\n/sc:implement --monitor-resources 대규모_기능\n# → 토큰, 메모리, 시간 사용량 실시간 추적\n```\n\n### 팀 협업 최적화\n\n#### 일관된 설정 공유\n```bash\n# 팀 전체 설정 동기화\n/sc:load --team-config team-superclaude-config.json\n# → 팀 공통 페르소나, 플래그, MCP 설정\n```\n\n#### 지식 공유 자동화\n```bash\n# 작업 과정 자동 문서화\n/sc:implement feature_name --document-process --persona-scribe=ko\n# → 구현 과정을 자동으로 한국어 문서화\n```\n\n### 보안 및 프라이버시\n\n#### 민감 정보 보호\n```bash\n# 안전 모드에서 민감한 작업\n/sc:implement --safe-mode --no-logging 결제_시스템\n# → 로깅 비활성화 + 최대 검증\n\n# 프라이버시 우선 모드\n/sc:analyze --local-only --no-mcp 기밀_프로젝트/\n# → 외부 서버 사용 없이 로컬에서만 분석\n```\n\n### 지속적 학습 및 개선\n\n#### 사용 패턴 분석\n```bash\n# 개인 사용 패턴 분석\n/sc:index --analyze-usage --optimize-recommendations\n# → 개인 작업 패턴 분석 후 최적화 제안\n\n# 팀 효율성 분석\n/sc:analyze --team-productivity team-usage-stats/\n# → 팀 전체 SuperClaude 활용도 분석\n```\n\n#### 새로운 패턴 실험\n```bash\n# 실험적 기능 안전 테스트\n/sc:implement --experimental --dry-run 새로운_접근법\n# → 실제 적용 전 안전한 실험\n\n# A/B 테스트\n/sc:implement feature_A --variant A && /sc:implement feature_B --variant B\n# → 두 가지 구현 방식 비교\n```\n\n이러한 고급 기법들을 마스터하면 SuperClaude의 진정한 파워를 발휘할 수 있습니다. 처음에는 기본 명령어부터 시작해서 점진적으로 고급 기능들을 익혀나가는 것을 권장합니다.\n\n---\n\n## 마무리\n\nSuperClaude는 단순한 도구가 아닌, 개발자의 사고 과정을 확장하고 생산성을 극대화하는 지능형 파트너입니다. 이 가이드에서 소개한 모든 기능들을 한 번에 익히려 하지 마시고, 실제 프로젝트에서 필요에 따라 점진적으로 활용해보시기 바랍니다.\n\n**시작 권장 사항:**\n1. 기본 명령어 (`/sc:implement`, `/sc:analyze`, `/sc:improve`) 부터 익히기\n2. 자주 사용하는 플래그 (`--c7`, `--seq`, `--magic`) 학습\n3. 프로젝트 도메인에 맞는 페르소나 활용\n4. 점진적으로 고급 기능 (Wave 모드, 서브 에이전트) 도입\n\nSuperClaude와 함께 더 효율적이고 즐거운 개발 경험을 만들어가시길 바랍니다! 🚀"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":789,"cache_read_input_tokens":39771,"output_tokens":19053,"service_tier":"standard"}},"requestId":"req_011CRRsQbhuWCxTHNRsScD5V","type":"assistant","uuid":"2ed74ed4-2a4b-4ffd-9795-6209e02c93d3","timestamp":"2025-07-24T12:53:54.912Z"}
{"parentUuid":"2ed74ed4-2a4b-4ffd-9795-6209e02c93d3","isSidechain":false,"userType":"external","cwd":"D:\\SuperClaude_Framework","sessionId":"c6f11314-cf94-4c1f-9bb8-4588b9cdbfcb","version":"1.0.59","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01D6W2Uvw2gjcrAAu8cZN8Cn","type":"tool_result","content":"File created successfully at: D:\\SuperClaude_Framework\\SuperClaude_활용_가이드.md"}]},"uuid":"f75f9beb-3c6d-4e7c-8e8f-43713e25d144","timestamp":"2025-07-24T12:53:59.572Z","toolUseResult":{"type":"create","filePath":"D:\\SuperClaude_Framework\\SuperClaude_활용_가이드.md","content":"# SuperClaude 프레임워크 완전 활용 가이드\n\nSuperClaude는 Claude Code를 확장하여 개발자의 생산성을 극대화하는 강력한 프레임워크입니다. 이 가이드에서는 SuperClaude의 모든 기능을 효과적으로 활용하는 방법을 단계별로 설명합니다.\n\n## 목차\n1. [기본 개념과 설치](#기본-개념과-설치)\n2. [핵심 명령어 활용법](#핵심-명령어-활용법)\n3. [페르소나 시스템 활용](#페르소나-시스템-활용)\n4. [플래그 시스템 마스터하기](#플래그-시스템-마스터하기)\n5. [MCP 서버 통합 활용](#mcp-서버-통합-활용)\n6. [실전 활용 시나리오](#실전-활용-시나리오)\n7. [고급 팁과 트릭](#고급-팁과-트릭)\n\n---\n\n## 기본 개념과 설치\n\n### SuperClaude란?\nSuperClaude는 Claude Code에 특화된 명령어, 페르소나, MCP 서버 통합을 제공하는 Python 프레임워크입니다. 개발 워크플로우를 체계화하고 자동화하여 개발자의 생산성을 크게 향상시킵니다.\n\n### 핵심 구성 요소\n- **16개 전문 명령어**: 개발 전 과정을 커버하는 특화된 명령어\n- **11개 전문 페르소나**: 도메인별 특화된 AI 행동 패턴\n- **MCP 서버 통합**: Context7, Sequential, Magic, Playwright 서버\n- **플래그 시스템**: 세밀한 실행 제어와 최적화\n- **Wave 오케스트레이션**: 복잡한 작업의 단계별 실행\n\n### 설치 방법\n\n#### 기본 설치\n```bash\npython3 -m SuperClaude install\n```\n\n#### 설치 옵션\n```bash\n# 대화형 설치 (구성 요소 선택 가능)\nSuperClaude install --interactive\n\n# 개발자용 전체 설치\nSuperClaude install --profile developer\n\n# 최소 설치 (핵심 기능만)\nSuperClaude install --minimal\n\n# 시스템 진단\nSuperClaude install --diagnose\n```\n\n### 설치 확인\n```bash\n# 설치 검증\npython3 -c \"from setup.operations.install import validate_system_requirements\"\n\n# 컴포넌트 검증\npython3 -c \"from setup.components.core import CoreComponent; c = CoreComponent(); print(c.validate_installation())\"\n```\n\n---\n\n## 핵심 명령어 활용법\n\nSuperClaude는 개발 워크플로우의 모든 측면을 커버하는 16개의 전문 명령어를 제공합니다. 모든 명령어는 `/sc:` 접두사를 사용합니다.\n\n### 개발 명령어\n\n#### `/sc:implement` - 기능 구현\n가장 강력한 명령어 중 하나로, 새로운 기능이나 컴포넌트를 구현합니다.\n\n**기본 사용법:**\n```bash\n/sc:implement 사용자 인증 시스템\n/sc:implement 댓글 기능 추가\n/sc:implement --type component --framework react 모달 컴포넌트\n```\n\n**주요 플래그:**\n- `--type`: component, api, service, feature\n- `--framework`: react, vue, angular, express 등\n- `--wave-mode`: 복잡한 구현 시 단계별 실행\n\n**자동 활성화 기능:**\n- 프론트엔드 구현 시 → Frontend 페르소나 + Magic MCP 서버\n- 백엔드 구현 시 → Backend 페르소나 + Sequential MCP 서버\n- 보안 관련 구현 시 → Security 페르소나\n\n#### `/sc:build` - 프로젝트 빌드\n프로젝트 빌드와 컴파일을 담당합니다.\n\n**사용 예시:**\n```bash\n/sc:build                    # 전체 프로젝트 빌드\n/sc:build --target frontend  # 프론트엔드만 빌드\n/sc:build --optimize        # 최적화 빌드\n```\n\n#### `/sc:design` - 시스템 설계\n아키텍처와 디자인 패턴을 설계합니다.\n\n**사용 예시:**\n```bash\n/sc:design 마이크로서비스 아키텍처\n/sc:design --domain frontend 컴포넌트 시스템\n/sc:design --focus performance 고성능 캐싱 시스템\n```\n\n### 분석 명령어\n\n#### `/sc:analyze` - 코드 분석\n시스템의 다각적 분석을 수행합니다.\n\n**분석 유형:**\n```bash\n/sc:analyze                           # 전체 시스템 분석\n/sc:analyze --focus security         # 보안 중심 분석\n/sc:analyze --focus performance      # 성능 중심 분석\n/sc:analyze @src/components/         # 특정 디렉토리 분석\n/sc:analyze --think-hard             # 심화 분석 (10K 토큰)\n/sc:analyze --ultrathink             # 최대 심도 분석 (32K 토큰)\n```\n\n**자동 활성화:**\n- 복잡도 > 0.7 → Wave 모드 자동 활성화\n- 보안 키워드 감지 → Security 페르소나\n- 성능 이슈 감지 → Performance 페르소나\n\n#### `/sc:troubleshoot` - 문제 해결\n시스템적 문제 조사와 해결책 제시\n\n**사용 예시:**\n```bash\n/sc:troubleshoot 로그인이 안 됨\n/sc:troubleshoot --symptoms \"페이지 로딩 느림\"\n/sc:troubleshoot --focus database\n```\n\n#### `/sc:explain` - 설명과 교육\n코드나 시스템에 대한 교육적 설명\n\n**사용 예시:**\n```bash\n/sc:explain React hooks 사용법\n/sc:explain --detailed JWT 인증 프로세스\n/sc:explain @src/auth/jwt.js\n```\n\n### 품질 개선 명령어\n\n#### `/sc:improve` - 코드 개선\n증거 기반 코드 품질 향상\n\n**개선 유형:**\n```bash\n/sc:improve                      # 전체 품질 개선\n/sc:improve --focus performance  # 성능 최적화\n/sc:improve --focus security     # 보안 강화\n/sc:improve --focus quality      # 코드 품질\n/sc:improve --loop              # 반복적 개선\n```\n\n**Wave 모드 활용:**\n```bash\n/sc:improve --wave-mode progressive    # 점진적 개선\n/sc:improve --wave-strategy systematic # 체계적 개선\n```\n\n#### `/sc:cleanup` - 기술 부채 정리\n체계적인 코드 정리와 리팩토링\n\n**사용 예시:**\n```bash\n/sc:cleanup                    # 전체 정리\n/sc:cleanup --focus debt      # 기술 부채 중심\n/sc:cleanup @src/legacy/      # 특정 디렉토리\n```\n\n#### `/sc:test` - 테스트 워크플로우\n포괄적인 테스트 전략과 실행\n\n**테스트 유형:**\n```bash\n/sc:test                    # 전체 테스트\n/sc:test --type unit       # 단위 테스트\n/sc:test --type e2e        # E2E 테스트\n/sc:test --type benchmark  # 성능 테스트\n```\n\n### 문서화 명령어\n\n#### `/sc:document` - 문서 생성\n전문적인 문서 작성과 현지화\n\n**사용 예시:**\n```bash\n/sc:document API 명세서\n/sc:document --type guide 사용자 가이드\n/sc:document --persona-scribe=ko 한국어 문서\n```\n\n### 메타 명령어\n\n#### `/sc:task` - 프로젝트 관리\n장기간 프로젝트 관리와 추적\n\n**사용 예시:**\n```bash\n/sc:task 사용자 대시보드 개발\n/sc:task --estimate 개발 기간 산정\n/sc:task --track 진행 상황 추적\n```\n\n#### `/sc:spawn` - 작업 오케스트레이션\n복잡한 다단계 작업 조율\n\n**사용 예시:**\n```bash\n/sc:spawn 전체 시스템 현대화\n/sc:spawn --parallel 병렬 처리\n/sc:spawn --coordinate 서버 간 조율\n```\n\n#### `/sc:index` - 명령어 카탈로그\n사용 가능한 명령어와 기능 탐색\n\n**사용 예시:**\n```bash\n/sc:index performance      # 성능 관련 명령어\n/sc:index --category dev   # 개발 카테고리\n```\n\n#### `/sc:load` - 프로젝트 컨텍스트 로딩\n프로젝트 전체 컨텍스트 이해\n\n**사용 예시:**\n```bash\n/sc:load @monorepo/        # 모노레포 전체\n/sc:load --focus backend   # 백엔드 중심\n```\n\n---\n\n## 페르소나 시스템 활용\n\nSuperClaude의 페르소나 시스템은 11개의 전문화된 AI 행동 패턴을 제공하여 도메인별 최적화된 결과를 제공합니다.\n\n### 기술 전문가 페르소나\n\n#### `--persona-architect` - 시스템 아키텍트\n**특징:** 장기적 사고, 확장성 중심, 시스템 전체 관점\n\n**자동 활성화:**\n- \"architecture\", \"design\", \"scalability\" 키워드\n- 복잡한 시스템 수정\n- 아키텍처 복잡도 포함 추정 요청\n\n**우선순위:** 장기 유지보수성 > 확장성 > 성능 > 단기 이익\n\n**최적화된 명령어:**\n```bash\n/sc:analyze --persona-architect    # 아키텍처 관점 분석\n/sc:design --persona-architect     # 시스템 설계\n/sc:estimate --persona-architect   # 아키텍처 복잡도 고려 추정\n```\n\n**품질 기준:**\n- 유지보수성: 이해하고 수정 가능한 솔루션\n- 확장성: 성장과 부하 증가 수용\n- 모듈성: 느슨한 결합, 높은 응집도\n\n#### `--persona-frontend` - UX 전문가\n**특징:** 사용자 경험 우선, 접근성 옹호, 성능 인식\n\n**성능 예산:**\n- 로딩 시간: 3G에서 <3초, WiFi에서 <1초\n- 번들 크기: 초기 <500KB, 전체 <2MB\n- 접근성: WCAG 2.1 AA 최소 90%+\n- Core Web Vitals: LCP <2.5초, FID <100ms, CLS <0.1\n\n**자동 활성화:**\n- \"component\", \"responsive\", \"accessibility\" 키워드\n- 디자인 시스템 작업\n- 프론트엔드 개발\n\n**최적화된 명령어:**\n```bash\n/sc:build --persona-frontend       # UI 빌드 최적화\n/sc:improve --perf --persona-frontend  # 프론트엔드 성능\n/sc:test e2e --persona-frontend    # 사용자 워크플로우 테스트\n```\n\n#### `--persona-backend` - 안정성 엔지니어\n**특징:** 안정성 우선, API 전문가, 데이터 무결성 중심\n\n**안정성 예산:**\n- 가동 시간: 99.9% (연간 8.7시간 다운타임)\n- 오류율: 중요 작업 <0.1%\n- 응답 시간: API 호출 <200ms\n- 복구 시간: 중요 서비스 <5분\n\n**우선순위:** 안정성 > 보안 > 성능 > 기능 > 편의성\n\n**최적화된 명령어:**\n```bash\n/sc:build --api --persona-backend     # API 설계 및 백엔드 빌드\n/sc:implement --type api --persona-backend  # API 구현\n```\n\n#### `--persona-security` - 위협 모델링 전문가\n**특징:** 보안 우선, 컴플라이언스 전문가, 취약점 전문가\n\n**위협 평가 매트릭스:**\n- 위협 수준: Critical(즉시), High(24h), Medium(7일), Low(30일)\n- 공격 표면: 외부 노출(100%), 내부(70%), 격리(40%)\n- 데이터 민감도: PII/금융(100%), 비즈니스(80%), 공개(30%)\n\n**우선순위:** 보안 > 컴플라이언스 > 안정성 > 성능 > 편의성\n\n**최적화된 명령어:**\n```bash\n/sc:analyze --focus security --persona-security\n/sc:improve --security --persona-security\n```\n\n#### `--persona-performance` - 최적화 전문가\n**특징:** 측정 기반, 병목 제거, 메트릭 중심\n\n**성능 예산:**\n- 로딩 시간: 3G <3초, WiFi <1초, API <500ms\n- 번들 크기: 초기 <500KB, 전체 <2MB, 컴포넌트당 <50KB\n- 메모리 사용: 모바일 <100MB, 데스크톱 <500MB\n- CPU 사용: 평균 <30%, 60fps용 피크 <80%\n\n**우선순위:** 측정 우선 > 중요 경로 최적화 > 사용자 경험 > 성급한 최적화 방지\n\n**최적화된 명령어:**\n```bash\n/sc:improve --perf --persona-performance\n/sc:analyze --focus performance --persona-performance\n/sc:test --benchmark --persona-performance\n```\n\n### 프로세스 & 품질 전문가\n\n#### `--persona-analyzer` - 근본 원인 전문가\n**특징:** 증거 기반, 체계적 조사, 근본 원인 중심\n\n**조사 방법론:**\n- 증거 수집: 가설 형성 전 모든 데이터 수집\n- 패턴 인식: 데이터 내 상관관계와 이상 징후 식별\n- 가설 검증: 잠재적 원인 체계적 검증\n- 근본 원인 검증: 재현 가능한 테스트로 근본 원인 확인\n\n**우선순위:** 증거 > 체계적 접근 > 철저함 > 속도\n\n**최적화된 명령어:**\n```bash\n/sc:analyze --persona-analyzer          # 체계적, 증거 기반 분석\n/sc:troubleshoot --persona-analyzer     # 근본 원인 식별\n/sc:explain --detailed --persona-analyzer  # 증거 기반 설명\n```\n\n#### `--persona-qa` - 품질 옹호자\n**특징:** 예방 중심, 테스트 전문가, 엣지 케이스 탐정\n\n**품질 위험 평가:**\n- 중요 경로 분석: 필수 사용자 여정과 비즈니스 프로세스 식별\n- 실패 영향: 다양한 실패 유형의 결과 평가\n- 결함 확률: 컴포넌트별 결함률 과거 데이터\n- 복구 난이도: 배포 후 문제 수정 노력\n\n**우선순위:** 예방 > 탐지 > 수정 > 포괄적 커버리지\n\n**최적화된 명령어:**\n```bash\n/sc:test --persona-qa                   # 포괄적 테스트 전략\n/sc:troubleshoot --persona-qa           # 품질 문제 조사\n/sc:analyze --focus quality --persona-qa\n```\n\n#### `--persona-refactorer` - 코드 품질 전문가\n**특징:** 단순성 우선, 유지보수성, 클린 코드 옹호\n\n**코드 품질 메트릭:**\n- 복잡도 점수: 순환 복잡도, 인지 복잡도, 중첩 깊이\n- 유지보수성 지수: 가독성, 문서화 커버리지, 일관성\n- 기술 부채 비율: 문제 수정 예상 시간 vs 개발 시간\n- 테스트 커버리지: 단위 테스트, 통합 테스트, 문서 예제\n\n**우선순위:** 단순성 > 유지보수성 > 가독성 > 성능 > 영리함\n\n**최적화된 명령어:**\n```bash\n/sc:improve --quality --persona-refactorer  # 코드 품질과 유지보수성\n/sc:cleanup --persona-refactorer            # 체계적 기술 부채 감소\n```\n\n#### `--persona-devops` - 인프라 전문가\n**특징:** 자동화, 관찰가능성, 안정성 엔지니어링\n\n**인프라 자동화 전략:**\n- 배포 자동화: 무중단 배포, 자동 롤백\n- 구성 관리: 코드형 인프라, 버전 제어\n- 모니터링 통합: 자동 모니터링, 알림 설정\n- 스케일링 정책: 성능 메트릭 기반 자동 스케일링\n\n**우선순위:** 자동화 > 관찰가능성 > 안정성 > 확장성 > 수동 프로세스\n\n### 지식 & 커뮤니케이션 전문가\n\n#### `--persona-mentor` - 지식 전수 전문가\n**특징:** 교육 중심, 지식 전수, 문서화 옹호\n\n**학습 경로 최적화:**\n- 기술 평가: 현재 지식 수준과 학습 목표 평가\n- 점진적 스캐폴딩: 적절한 복잡도로 이해 단계적 구축\n- 학습 스타일 적응: 사용자 선호도에 따른 교육 접근법 조정\n- 지식 보존: 예제와 실습으로 핵심 개념 강화\n\n**우선순위:** 이해 > 지식 전수 > 교육 > 작업 완료\n\n**최적화된 명령어:**\n```bash\n/sc:explain --persona-mentor            # 포괄적 교육 설명\n/sc:document --persona-mentor           # 교육용 문서와 가이드\n/sc:index --persona-mentor              # 복잡한 시스템 이해\n```\n\n#### `--persona-scribe=lang` - 전문 작가\n**특징:** 전문 작가, 문서화 전문가, 현지화 전문가, 문화적 커뮤니케이션 어드바이저\n\n**언어 지원:** en(기본), es, fr, de, ja, zh, pt, it, ru, ko\n\n**콘텐츠 유형:** 기술 문서, 사용자 가이드, 위키, PR 콘텐츠, 커밋 메시지, 현지화\n\n**청중 분석 프레임워크:**\n- 경험 수준: 기술 전문성, 도메인 지식, 도구 친숙도\n- 문화적 맥락: 언어 선호도, 커뮤니케이션 규범, 문화적 민감성\n- 목적 맥락: 학습, 참조, 구현, 문제 해결\n- 시간 제약: 자세한 탐구 vs 빠른 참조\n\n**우선순위:** 명확성 > 청중 요구 > 문화적 민감성 > 완전성 > 간결성\n\n**최적화된 명령어:**\n```bash\n/sc:document --persona-scribe=ko        # 한국어 전문 문서\n/sc:explain --persona-scribe=en         # 청중 맞춤 설명\n/sc:git --persona-scribe=ko             # 전문 커밋 메시지\n```\n\n### 페르소나 협업 패턴\n\n**상호 보완적 협업:**\n- architect + performance: 성능 예산을 고려한 시스템 설계\n- security + backend: 위협 모델링을 포함한 안전한 서버사이드 개발\n- frontend + qa: 접근성과 성능을 고려한 사용자 중심 개발\n- mentor + scribe: 문화적 적응을 포함한 교육 콘텐츠 작성\n- analyzer + refactorer: 근본 원인 분석과 체계적 코드 개선\n\n---\n\n## 플래그 시스템 마스터하기\n\nSuperClaude의 플래그 시스템은 세밀한 실행 제어와 최적화를 제공합니다. 자동 활성화와 충돌 해결 기능이 내장되어 있습니다.\n\n### 기획 & 분석 플래그\n\n#### `--plan`\n실행 전 계획 표시\n```bash\n/sc:implement --plan 사용자 인증 시스템\n# → 도구, 출력, 단계 순서 미리 확인\n```\n\n#### `--think` / `--think-hard` / `--ultrathink`\n분석 깊이 제어\n\n**`--think` (4K 토큰)**\n- 다중 파일 분석\n- Sequential MCP 자동 활성화\n- 자동 활성화: 임포트 체인 >5파일, 모듈 간 호출 >10개\n\n```bash\n/sc:analyze --think @src/components/\n```\n\n**`--think-hard` (10K 토큰)**\n- 깊은 아키텍처 분석\n- 시스템 전체 의존성 분석\n- 자동 활성화: 시스템 리팩토링, 병목 >3모듈, 보안 취약점\n\n```bash\n/sc:analyze --think-hard 레거시 시스템\n```\n\n**`--ultrathink` (32K 토큰)**\n- 중요 시스템 재설계 분석\n- 복잡한 문제에 대한 최대 심도 분석\n- 자동 활성화: 레거시 현대화, 중요 취약점, 성능 저하 >50%\n\n```bash\n/sc:analyze --ultrathink --all-mcp 엔터프라이즈 시스템\n```\n\n### 압축 & 효율성 플래그\n\n#### `--uc` / `--ultracompressed`\n30-50% 토큰 절약\n- 기호와 구조화된 출력 사용\n- 자동 활성화: 컨텍스트 사용량 >75% 또는 대규모 작업\n- 자동 생성 기호 범례, 기술적 정확성 유지\n\n```bash\n/sc:analyze --uc 대규모_프로젝트/\n```\n\n#### `--validate`\n사전 작업 검증과 위험 평가\n- 자동 활성화: 위험 점수 >0.7 또는 리소스 사용량 >75%\n- 위험 알고리즘: 복잡도*0.3 + 취약점*0.25 + 리소스*0.2 + 실패확률*0.15 + 시간*0.1\n\n```bash\n/sc:implement --validate 결제 시스템\n```\n\n#### `--safe-mode`\n최대 검증, 보수적 실행\n- 자동 활성화: 리소스 사용량 >85% 또는 프로덕션 환경\n- 검증 체크 활성화, --uc 모드 강제, 위험 작업 차단\n\n```bash\n/sc:deploy --safe-mode production\n```\n\n### MCP 서버 제어 플래그\n\n#### `--c7` / `--context7`\n라이브러리 문서 조회\n- 자동 활성화: 외부 라이브러리 임포트, 프레임워크 질문\n- 워크플로우: 라이브러리 ID 해결 → 라이브러리 문서 조회 → 구현\n\n```bash\n/sc:implement --c7 React 컴포넌트\n```\n\n#### `--seq` / `--sequential`\n복잡한 다단계 분석\n- 자동 활성화: 복잡한 디버깅, 시스템 설계, --think 플래그\n- 탐지: debug/trace/analyze 키워드, 중첩 조건문, 비동기 체인\n\n```bash\n/sc:troubleshoot --seq 성능 병목\n```\n\n#### `--magic`\nUI 컴포넌트 생성\n- 자동 활성화: UI 컴포넌트 요청, 디자인 시스템 쿼리\n- 탐지: component/button/form 키워드, JSX 패턴, 접근성 요구사항\n\n```bash\n/sc:implement --magic 반응형 모달\n```\n\n#### `--play` / `--playwright`\n크로스 브라우저 자동화와 E2E 테스트\n- 탐지: test/e2e 키워드, 성능 모니터링, 시각적 테스트\n\n```bash\n/sc:test --play e2e 사용자_워크플로우\n```\n\n#### `--all-mcp` / `--no-mcp`\n모든 MCP 서버 활성화/비활성화\n- `--all-mcp`: 문제 복잡도 >0.8, 다중 도메인 지표 시 자동 활성화\n- `--no-mcp`: 40-60% 더 빠른 실행, WebSearch 대체\n\n```bash\n/sc:analyze --all-mcp 복합_시스템/\n/sc:build --no-mcp --fast\n```\n\n### 서브 에이전트 위임 플래그\n\n#### `--delegate [files|folders|auto]`\n병렬 처리를 위한 서브 에이전트 위임\n- **files**: 개별 파일 분석을 서브 에이전트에 위임\n- **folders**: 디렉토리 수준 분석을 서브 에이전트에 위임\n- **auto**: 범위와 복잡도에 따른 자동 위임 전략 감지\n- 자동 활성화: >7개 디렉토리 또는 >50개 파일\n- 적합한 작업에서 40-70% 시간 절약\n\n```bash\n/sc:analyze --delegate auto 대규모_모노레포/\n/sc:improve --delegate files src/components/\n```\n\n#### `--concurrency [n]`\n최대 동시 서브 에이전트와 작업 제어\n- 기본값: 7, 범위: 1-15\n- 리소스와 복잡도에 따른 동적 할당\n\n```bash\n/sc:load --delegate --concurrency 10 enterprise_project/\n```\n\n### Wave 오케스트레이션 플래그\n\n#### `--wave-mode [auto|force|off]`\nWave 오케스트레이션 활성화 제어\n- **auto**: 복잡도 >0.8 AND 파일수 >20 AND 작업유형 >2 시 자동 활성화\n- **force**: 자동 감지 무시하고 경계선 케이스에 대해 강제 활성화\n- **off**: Wave 모드 비활성화, 대신 서브 에이전트 위임 사용\n\n```bash\n/sc:improve --wave-mode force 레거시_시스템/\n/sc:analyze --wave-mode off --delegate 단순_분석/\n```\n\n#### `--wave-strategy [progressive|systematic|adaptive|enterprise]`\nWave 오케스트레이션 전략 선택\n- **progressive**: 점진적 개선을 위한 반복적 향상\n- **systematic**: 복잡한 문제를 위한 포괄적 체계적 분석\n- **adaptive**: 다양한 복잡도에 따른 동적 구성\n- **enterprise**: >100파일, >0.7 복잡도의 대규모 오케스트레이션\n\n```bash\n/sc:improve --wave-strategy progressive 점진적_개선/\n/sc:analyze --wave-strategy enterprise 대기업_시스템/\n```\n\n### 범위 & 포커스 플래그\n\n#### `--scope [level]`\n분석 범위 지정\n- **file**: 단일 파일 분석\n- **module**: 모듈/디렉토리 수준\n- **project**: 전체 프로젝트 범위\n- **system**: 시스템 전체 분석\n\n```bash\n/sc:analyze --scope system\n/sc:improve --scope module @src/auth/\n```\n\n#### `--focus [domain]`\n특정 도메인 집중\n- **performance**: 성능 최적화\n- **security**: 보안 분석과 강화\n- **quality**: 코드 품질과 유지보수성\n- **architecture**: 시스템 설계와 구조\n- **accessibility**: UI/UX 접근성 준수\n- **testing**: 테스트 커버리지와 품질\n\n```bash\n/sc:analyze --focus security 인증_시스템/\n/sc:improve --focus performance --loop\n```\n\n### 반복 개선 플래그\n\n#### `--loop`\n반복 개선 모드 활성화\n- 자동 활성화: 품질 개선 요청, 정제 작업, 다듬기 작업\n- 호환 명령어: /sc:improve, /refine, /enhance, /fix, /cleanup, /analyze\n- 기본값: 자동 검증이 포함된 3회 반복\n\n```bash\n/sc:improve --loop --iterations 5 코드_품질/\n/sc:cleanup --loop --interactive 레거시_코드/\n```\n\n#### `--iterations [n]`\n개선 사이클 수 제어\n- 기본값: 3, 범위: 1-10\n- 작업 복잡도에 따른 지능적 기본값 재정의\n\n#### `--interactive`\n반복 간 사용자 확인 활성화\n- 각 사이클 전 검토와 승인을 위한 일시 정지\n- 수동 안내와 과정 수정 허용\n\n### 내성적 & 투명성 플래그\n\n#### `--introspect` / `--introspection`\n사고 과정을 노출하는 깊은 투명성 모드\n- 자동 활성화: SuperClaude 프레임워크 작업, 복잡한 디버깅\n- 투명성 마커: 🤔 사고, 🎯 결정, ⚡ 행동, 📊 확인, 💡 학습\n- 공유된 불확실성과 대화식 반영\n\n```bash\n/sc:analyze --introspect 복잡한_버그/\n/sc:troubleshoot --introspection 시스템_장애/\n```\n\n### 플래그 우선순위 규칙\n\n1. 안전 플래그 (--safe-mode) > 최적화 플래그\n2. 명시적 플래그 > 자동 활성화\n3. 사고 깊이: --ultrathink > --think-hard > --think\n4. --no-mcp가 모든 개별 MCP 플래그 재정의\n5. 범위: system > project > module > file\n6. 마지막 지정 페르소나가 우선\n7. Wave 모드: --wave-mode off > --wave-mode force > --wave-mode auto\n8. 서브 에이전트 위임: 명시적 --delegate > 자동 감지\n9. 루프 모드: 명시적 --loop > 정제 키워드 기반 자동 감지\n10. --uc 자동 활성화가 장황한 플래그 재정의\n\n---\n\n## MCP 서버 통합 활용\n\nSuperClaude는 4개의 MCP 서버와 통합되어 전문적인 기능을 제공합니다.\n\n### Context7 서버 - 문서 & 연구\n\n**목적:** 공식 라이브러리 문서, 코드 예제, 모범 사례, 현지화 표준\n\n**자동 활성화 패턴:**\n- 외부 라이브러리 임포트 감지\n- 프레임워크별 질문\n- Scribe 페르소나 활성화 시\n\n**워크플로우 프로세스:**\n1. 라이브러리 감지: 임포트, 의존성, package.json에서 라이브러리 참조 스캔\n2. ID 해결: `resolve-library-id`로 Context7 호환 라이브러리 ID 찾기\n3. 문서 검색: 특정 주제 중심으로 `get-library-docs` 호출\n4. 패턴 추출: 관련 코드 패턴과 구현 예제 추출\n5. 구현: 적절한 출처와 버전 호환성으로 패턴 적용\n\n**활용 예시:**\n```bash\n/sc:implement --c7 React hooks를 사용한 상태 관리\n/sc:document --c7 --persona-scribe=ko Express.js API 가이드\n/sc:explain --c7 Vue 3 Composition API\n```\n\n**오류 복구:**\n- 라이브러리 없음 → WebSearch 대안 → 수동 구현\n- 문서 시간 초과 → 캐시된 지식 사용 → 제한사항 표시\n- 서버 사용 불가 → 백업 Context7 인스턴스 → 우아한 성능 저하\n\n### Sequential 서버 - 복잡한 분석 & 사고\n\n**목적:** 다단계 문제 해결, 아키텍처 분석, 체계적 디버깅\n\n**자동 활성화 패턴:**\n- 복잡한 디버깅 시나리오\n- 시스템 설계 질문\n- `--think` 플래그 사용\n\n**워크플로우 프로세스:**\n1. 문제 분해: 복잡한 문제를 분석 가능한 구성 요소로 분해\n2. 서버 조정: Context7(문서), Magic(UI 인사이트), Playwright(테스트)와 조정\n3. 체계적 분석: 각 구성 요소에 구조화된 사고 적용\n4. 관계 매핑: 의존성, 상호작용, 피드백 루프 식별\n5. 가설 생성: 각 구성 요소에 대한 테스트 가능한 가설 생성\n6. 증거 수집: 도구 사용을 통한 지원 증거 수집\n7. 다중 서버 종합: 여러 서버의 발견사항 결합\n8. 권장사항 생성: 우선순위 순서로 실행 가능한 다음 단계 제공\n\n**사용 사례:**\n```bash\n/sc:troubleshoot --seq 복잡한_버그_근본원인_분석\n/sc:analyze --think-hard --seq 아키텍처_검토\n/sc:improve --seq --loop 성능_병목_식별\n```\n\n**사고 모드와의 통합:**\n- `--think` (4K): 컨텍스트 인식이 있는 모듈 수준 분석\n- `--think-hard` (10K): 아키텍처 중심 시스템 전체 분석\n- `--ultrathink` (32K): 포괄적 커버리지를 가진 중요 시스템 분석\n\n### Magic 서버 - UI 컴포넌트 & 디자인\n\n**목적:** 현대적 UI 컴포넌트 생성, 디자인 시스템 통합, 반응형 디자인\n\n**자동 활성화 패턴:**\n- UI 컴포넌트 요청\n- 디자인 시스템 쿼리\n- Frontend 페르소나 활성화\n\n**워크플로우 프로세스:**\n1. 요구사항 파싱: 컴포넌트 명세와 디자인 시스템 요구사항 추출\n2. 패턴 검색: 21st.dev 데이터베이스에서 유사한 컴포넌트와 디자인 패턴 찾기\n3. 프레임워크 감지: 대상 프레임워크(React, Vue, Angular)와 버전 식별\n4. 서버 조정: 프레임워크 패턴을 위한 Context7, 복잡한 로직을 위한 Sequential과 동기화\n5. 코드 생성: 현대적 모범 사례와 프레임워크 규칙으로 컴포넌트 생성\n6. 디자인 시스템 통합: 기존 테마, 스타일, 토큰, 디자인 패턴 적용\n7. 접근성 준수: WCAG 준수, 시맨틱 마크업, 키보드 내비게이션 보장\n8. 반응형 디자인: 모바일 우선 반응형 패턴 구현\n9. 최적화: 성능 최적화와 코드 분할 적용\n\n**컴포넌트 카테고리:**\n- **대화형**: 버튼, 폼, 모달, 드롭다운, 내비게이션, 검색 컴포넌트\n- **레이아웃**: 그리드, 컨테이너, 카드, 패널, 사이드바, 헤더, 푸터\n- **디스플레이**: 타이포그래피, 이미지, 아이콘, 차트, 테이블, 리스트, 미디어\n- **피드백**: 알림, 알림, 진행 표시기, 툴팁, 로딩 상태\n- **입력**: 텍스트 필드, 선택기, 날짜 선택기, 파일 업로드, 리치 텍스트 에디터\n\n**활용 예시:**\n```bash\n/sc:implement --magic 반응형_대시보드_컴포넌트\n/sc:design --magic 디자인_시스템_토큰\n/sc:improve --magic --persona-frontend 접근성_개선\n```\n\n### Playwright 서버 - 브라우저 자동화 & 테스트\n\n**목적:** 크로스 브라우저 E2E 테스트, 성능 모니터링, 자동화, 시각적 테스트\n\n**자동 활성화 패턴:**\n- 테스트 워크플로우\n- 성능 모니터링 요청\n- E2E 테스트 생성\n- QA 페르소나 활성화\n\n**워크플로우 프로세스:**\n1. 브라우저 연결: Chrome, Firefox, Safari, Edge 인스턴스에 연결\n2. 환경 설정: 뷰포트, 사용자 에이전트, 네트워크 조건, 디바이스 에뮬레이션 구성\n3. 내비게이션: 적절한 대기와 오류 처리로 대상 URL 탐색\n4. 서버 조정: 테스트 계획을 위한 Sequential, UI 검증을 위한 Magic과 동기화\n5. 상호작용: 브라우저 전반에 걸친 사용자 액션(클릭, 폼 채우기, 내비게이션) 수행\n6. 데이터 수집: 스크린샷, 비디오, 성능 메트릭, 콘솔 로그 캡처\n7. 검증: 예상 동작, 시각적 상태, 성능 임계값 확인\n8. 다중 서버 분석: 포괄적 테스트 분석을 위한 다른 서버와 조정\n9. 리포팅: 증거, 메트릭, 실행 가능한 인사이트로 테스트 리포트 생성\n\n**기능:**\n- **다중 브라우저 지원**: 일관된 API로 Chrome, Firefox, Safari, Edge\n- **시각적 테스트**: 스크린샷 캡처, 시각적 회귀 감지, 반응형 테스트\n- **성능 메트릭**: 로딩 시간, 렌더링 성능, 리소스 사용량, Core Web Vitals\n- **사용자 시뮬레이션**: 실제 사용자 상호작용 패턴, 접근성 테스트, 폼 워크플로우\n\n**활용 예시:**\n```bash\n/sc:test --play e2e 사용자_등록_워크플로우\n/sc:analyze --play 성능_모니터링 웹앱\n/sc:improve --play --persona-performance 로딩_최적화\n```\n\n### 서버 오케스트레이션 패턴\n\n**다중 서버 조정:**\n- 작업 분산: 기능에 따른 서버 간 지능적 작업 분할\n- 의존성 관리: 서버 간 의존성과 데이터 흐름 처리\n- 동기화: 통합 솔루션을 위한 서버 응답 조정\n- 로드 밸런싱: 서버 성능과 용량에 따른 워크로드 분산\n\n**캐싱 전략:**\n- Context7 캐시: 버전 인식 캐싱을 통한 문서 조회\n- Sequential 캐시: 패턴 매칭을 통한 분석 결과\n- Magic 캐시: 디자인 시스템 버전 관리를 통한 컴포넌트 패턴\n- Playwright 캐시: 환경별 캐싱을 통한 테스트 결과와 스크린샷\n\n**조합 사용 예시:**\n```bash\n# 모든 서버 활용한 포괄적 분석\n/sc:analyze --all-mcp --ultrathink 엔터프라이즈_시스템/\n\n# UI 컴포넌트 구현과 테스트\n/sc:implement --magic 모달_컴포넌트 && /sc:test --play e2e 모달_테스트\n\n# 문서 기반 구현과 검증\n/sc:implement --c7 --seq Next.js_API && /sc:test --play api_테스트\n```\n\n---\n\n## 실전 활용 시나리오\n\n실제 개발 상황에서 SuperClaude를 효과적으로 활용하는 구체적인 시나리오들을 살펴보겠습니다.\n\n### 시나리오 1: 새로운 기능 구현\n\n**상황:** React 기반 웹 애플리케이션에 사용자 대시보드 기능을 추가해야 함\n\n**단계별 접근:**\n\n1. **프로젝트 컨텍스트 이해**\n```bash\n/sc:load @src/ --focus frontend\n```\n→ Frontend 페르소나 자동 활성화, 프로젝트 구조 파악\n\n2. **기능 설계**\n```bash\n/sc:design 사용자 대시보드 --persona-architect --c7\n```\n→ 아키텍처 설계 + React 패턴 문서 참조\n\n3. **컴포넌트 구현**\n```bash\n/sc:implement --magic 대시보드_컴포넌트 --type component --framework react\n```\n→ Magic 서버로 현대적 React 컴포넌트 생성\n\n4. **API 통합**\n```bash\n/sc:implement --persona-backend 대시보드_API_연동 --type api\n```\n→ Backend 페르소나로 안정적인 API 통합\n\n5. **테스트 작성**\n```bash\n/sc:test --play e2e 대시보드_워크플로우\n```\n→ Playwright로 E2E 테스트 자동 생성\n\n6. **성능 최적화**\n```bash\n/sc:improve --focus performance --persona-performance 대시보드/\n```\n→ 성능 전문가 관점에서 최적화\n\n**예상 결과:**\n- 완전히 기능하는 React 대시보드 컴포넌트\n- API 통합과 상태 관리\n- 포괄적인 E2E 테스트\n- 성능 최적화된 코드\n- 접근성 준수 UI\n\n### 시나리오 2: 레거시 코드 현대화\n\n**상황:** 5년 된 jQuery 기반 프론트엔드를 React로 현대화\n\n**Wave 모드 활용:**\n```bash\n/sc:analyze --wave-mode auto --ultrathink @legacy/frontend/\n```\n→ 복잡도 자동 감지하여 Wave 모드 활성화\n\n**Wave 전략 실행:**\n```bash\n/sc:improve --wave-strategy systematic --wave-delegation folders legacy/\n```\n\n**Wave 단계별 진행:**\n1. **Wave 1: 분석** (Analyzer 페르소나)\n   - 레거시 코드 구조 분석\n   - 의존성 매핑\n   - 마이그레이션 위험 평가\n\n2. **Wave 2: 계획** (Architect 페르소나)\n   - 현대화 전략 수립\n   - 컴포넌트 분해 계획\n   - 단계별 마이그레이션 로드맵\n\n3. **Wave 3: 구현** (Frontend 페르소나)\n   - React 컴포넌트 변환\n   - 상태 관리 현대화\n   - 라우팅 시스템 업그레이드\n\n4. **Wave 4: 검증** (QA 페르소나)\n   - 기능 동등성 테스트\n   - 성능 비교 분석\n   - 사용자 경험 검증\n\n5. **Wave 5: 최적화** (Performance 페르소나)\n   - 번들 크기 최적화\n   - 로딩 성능 개선\n   - Core Web Vitals 최적화\n\n**예상 결과:**\n- 체계적이고 안전한 레거시 현대화\n- 단계별 검증과 롤백 가능성\n- 성능 향상과 유지보수성 개선\n- 포괄적인 테스트 커버리지\n\n### 시나리오 3: 성능 병목 해결\n\n**상황:** 웹 애플리케이션의 로딩 속도가 느려서 사용자 불만 증가\n\n**성능 중심 접근:**\n\n1. **성능 분석**\n```bash\n/sc:analyze --focus performance --persona-performance --play\n```\n→ Performance 페르소나 + Playwright 서버로 실제 성능 측정\n\n2. **병목 지점 식별**\n```bash\n/sc:troubleshoot --seq \"페이지 로딩 속도 저하\" --think-hard\n```\n→ Sequential 서버로 체계적 근본 원인 분석\n\n3. **최적화 구현**\n```bash\n/sc:improve --focus performance --loop --iterations 3\n```\n→ 반복적 성능 개선 (3회 사이클)\n\n4. **결과 검증**\n```bash\n/sc:test --play --benchmark 성능_테스트\n```\n→ 최적화 전후 성능 비교\n\n**구체적 최적화 영역:**\n- 이미지 최적화 및 지연 로딩\n- JavaScript 번들 분할\n- CSS 최적화 및 중요 경로 우선순위\n- 캐싱 전략 개선\n- 데이터베이스 쿼리 최적화\n\n### 시나리오 4: 보안 감사 및 강화\n\n**상황:** 금융 서비스 웹 애플리케이션의 보안 검토 필요\n\n**보안 중심 접근:**\n\n1. **보안 위험 평가**\n```bash\n/sc:analyze --focus security --persona-security --validate --ultrathink\n```\n→ Security 페르소나로 포괄적 위협 모델링\n\n2. **취약점 스캔**\n```bash\n/sc:troubleshoot --persona-security 보안_취약점 --seq\n```\n→ 체계적 취약점 식별과 위험도 평가\n\n3. **보안 강화 구현**\n```bash\n/sc:improve --focus security --persona-security --safe-mode\n```\n→ 안전 모드에서 보안 강화 조치\n\n4. **컴플라이언스 검증**\n```bash\n/sc:test --persona-qa 보안_컴플라이언스 --validate\n```\n→ 규정 준수 확인\n\n**주요 보안 영역:**\n- 인증 및 권한 부여 시스템\n- 데이터 암호화 및 보호\n- API 보안 (OWASP Top 10)\n- 세션 관리 및 CSRF 보호\n- 입력 검증 및 SQL 인젝션 방지\n\n### 시나리오 5: 국제화 및 현지화\n\n**상황:** 한국 시장 진출을 위한 다국어 지원 웹사이트 구축\n\n**현지화 전문 접근:**\n\n1. **현지화 전략 수립**\n```bash\n/sc:design --persona-scribe=ko 한국_시장_현지화_전략 --c7\n```\n→ Korean Scribe 페르소나로 문화적 맥락 고려\n\n2. **다국어 시스템 구현**\n```bash\n/sc:implement --c7 i18n_시스템 --framework react-i18next\n```\n→ Context7 서버로 i18n 라이브러리 패턴 참조\n\n3. **콘텐츠 현지화**\n```bash\n/sc:document --persona-scribe=ko 한국어_콘텐츠 --type guide\n```\n→ 문화적 적응과 현지 규범 고려\n\n4. **현지화 품질 검증**\n```bash\n/sc:test --play 다국어_UI_테스트 --persona-qa\n```\n→ 다양한 언어 환경에서 UI/UX 테스트\n\n**주요 현지화 영역:**\n- 텍스트 번역 및 문화적 적응\n- 날짜, 시간, 통화 형식\n- 읽기 방향 및 레이아웃 조정\n- 현지 결제 시스템 통합\n- 한국 웹 접근성 표준 준수\n\n### 시나리오 6: DevOps 파이프라인 구축\n\n**상황:** CI/CD 파이프라인과 인프라 자동화 구축\n\n**DevOps 중심 접근:**\n\n1. **인프라 설계**\n```bash\n/sc:design --persona-devops CI/CD_파이프라인 --focus infrastructure\n```\n→ DevOps 페르소나로 자동화 중심 설계\n\n2. **배포 스크립트 구현**\n```bash\n/sc:implement --persona-devops 자동_배포_시스템 --type service\n```\n→ 인프라 as 코드 방식 구현\n\n3. **모니터링 시스템**\n```bash\n/sc:implement --persona-devops 모니터링_대시보드 --seq\n```\n→ 관찰가능성 중심 모니터링\n\n4. **보안 강화**\n```bash\n/sc:improve --focus security --persona-security --persona-devops 배포_보안\n```\n→ Security + DevOps 페르소나 협업\n\n**주요 구축 영역:**\n- GitHub Actions/GitLab CI 파이프라인\n- Docker 컨테이너화\n- Kubernetes 오케스트레이션\n- 모니터링 및 로깅 (Prometheus, Grafana)\n- 보안 스캔 및 취약점 관리\n\n### 시나리오 7: 팀 협업 및 문서화\n\n**상황:** 새로운 팀원 온보딩과 프로젝트 문서화\n\n**교육 및 문서화 접근:**\n\n1. **프로젝트 가이드 작성**\n```bash\n/sc:document --persona-mentor --persona-scribe=ko 신입_개발자_가이드\n```\n→ Mentor + Scribe 페르소나 협업으로 교육적 문서\n\n2. **API 문서 생성**\n```bash\n/sc:document --c7 --persona-scribe=ko API_명세서 --type reference\n```\n→ Context7 서버로 표준 패턴 참조\n\n3. **코드 리뷰 가이드**\n```bash\n/sc:document --persona-mentor 코드_리뷰_가이드라인 --focus quality\n```\n→ 품질 중심 리뷰 프로세스\n\n4. **지식 전수 세션**\n```bash\n/sc:explain --persona-mentor --detailed 아키텍처_설계_원칙\n```\n→ 교육적 설명과 학습 지원\n\n**문서화 영역:**\n- 프로젝트 개요 및 아키텍처\n- 개발 환경 설정 가이드\n- API 사용법 및 예제\n- 코딩 표준 및 리뷰 가이드\n- 트러블슈팅 FAQ\n\n### 공통 성공 팁\n\n1. **적절한 페르소나 선택**: 작업 도메인에 맞는 페르소나 활용\n2. **MCP 서버 조합**: 복잡한 작업 시 여러 서버 조합 사용\n3. **플래그 조합**: 상황에 맞는 플래그 조합으로 최적화\n4. **반복적 개선**: --loop 플래그로 점진적 품질 향상\n5. **검증 중심**: --validate 플래그로 위험 최소화\n6. **문서화**: 작업 과정과 결과를 체계적으로 문서화\n\n---\n\n## 고급 팁과 트릭\n\nSuperClaude를 마스터하기 위한 고급 활용 기법들을 소개합니다.\n\n### 성능 최적화 전략\n\n#### 토큰 효율성 극대화\n```bash\n# 대규모 프로젝트 분석 시 자동 압축 활용\n/sc:analyze --uc @large_project/ --delegate auto\n# → 30-50% 토큰 절약 + 병렬 처리\n\n# 컨텍스트 사용량 모니터링하며 작업\n/sc:implement --plan feature_name\n# → 실행 전 토큰 사용량 예측\n```\n\n#### Wave 모드 최적화\n```bash\n# 복잡한 작업을 단계별로 최적화\n/sc:improve --wave-strategy adaptive --wave-delegation tasks\n# → 작업 유형별 전문 서브 에이전트 활용\n\n# 엔터프라이즈급 시스템 최적화\n/sc:analyze --wave-strategy enterprise --wave-validation\n# → 대규모 시스템용 특별 최적화\n```\n\n### 서브 에이전트 활용 고급 패턴\n\n#### 지능적 병렬 처리\n```bash\n# 파일별 병렬 분석으로 속도 향상\n/sc:analyze --delegate files --concurrency 10 @src/\n# → 40-70% 시간 절약\n\n# 폴더별 전문화 분석\n/sc:improve --delegate folders --focus-agents\n# → 디렉토리별 특화된 분석\n```\n\n#### 복합 위임 전략\n```bash\n# 혼합 범위에서 자동 최적화\n/sc:load --delegate auto @complex_monorepo/\n# → 시스템이 최적 위임 전략 자동 선택\n```\n\n### MCP 서버 조합의 예술\n\n#### 시너지 조합\n```bash\n# 완벽한 UI 구현: Magic + Context7 + Sequential\n/sc:implement --magic --c7 --seq 복잡한_대시보드_컴포넌트\n\n# 포괄적 성능 분석: Sequential + Playwright\n/sc:analyze --seq --play --focus performance 웹앱_성능\n\n# 보안 강화 구현: Context7 + Sequential (자동 활성화)\n/sc:improve --focus security 인증_시스템\n```\n\n#### 조건부 서버 활용\n```bash\n# 필요시에만 모든 서버 활용\n/sc:analyze --all-mcp 초복잡_시스템/ --ultrathink\n# → 복잡도 >0.8일 때만 모든 서버 활성화\n```\n\n### 페르소나 협업 마스터리\n\n#### 다중 페르소나 협업\n```bash\n# 아키텍트 + 성능 전문가 협업\n/sc:design --persona-architect 고성능_시스템 --focus performance\n# → 아키텍처 설계 시 성능 고려\n\n# 보안 + 백엔드 전문가 협업\n/sc:implement --persona-security --persona-backend 인증_API\n# → 보안 강화된 백엔드 구현\n```\n\n#### 컨텍스트별 페르소나 전환\n```bash\n# 단계별 전문가 활용\n/sc:analyze --persona-analyzer 문제_분석 && \\\n/sc:design --persona-architect 해결책_설계 && \\\n/sc:implement --persona-frontend UI_구현\n```\n\n### 플래그 조합의 고급 패턴\n\n#### 컨텍스트 적응형 플래그\n```bash\n# 위험도에 따른 자동 안전 모드\n/sc:implement --validate 결제_시스템\n# → 위험 점수 >0.7 시 자동으로 --safe-mode 활성화\n\n# 복잡도에 따른 자동 압축\necho \"대규모 프로젝트\" | /sc:analyze\n# → 컨텍스트 사용량 >75% 시 자동으로 --uc 활성화\n```\n\n#### 성능 프로파일 최적화\n```bash\n# 최적화 프로파일: 고성능 + 캐싱 + 병렬 실행\n/sc:build --optimize --cache --parallel\n\n# 표준 프로파일: 균형 잡힌 성능 + 적당한 리소스\n/sc:implement feature_name  # 기본값\n\n# 복잡 프로파일: 리소스 집약적 + 포괄적 분석\n/sc:analyze --ultrathink --all-mcp system/\n```\n\n### 반복 개선 마스터리\n\n#### 지능적 루프 전략\n```bash\n# 품질 중심 반복 개선\n/sc:improve --loop --focus quality --iterations 5 --interactive\n# → 각 단계에서 사용자 확인\n\n# 성능 중심 자동 반복\n/sc:improve --loop --focus performance --persona-performance\n# → 자동 3회 반복으로 성능 최적화\n```\n\n#### 조건부 반복\n```bash\n# 목표 달성까지 반복\n/sc:improve --loop --target \"성능 90점 이상\" --max-iterations 7\n# → 목표 달성 또는 최대 반복 횟수까지\n```\n\n### 에러 복구 및 대체 전략\n\n#### 우아한 성능 저하\n```bash\n# MCP 서버 장애 시 대체 전략\n/sc:implement feature_name --c7 || /sc:implement feature_name --no-mcp\n# → Context7 실패 시 WebSearch로 대체\n\n# 토큰 한계 대응\n/sc:analyze large_project/ --uc || /sc:analyze large_project/ --delegate auto\n# → 압축으로도 안 되면 위임으로 대체\n```\n\n#### 백업 전략\n```bash\n# 다중 접근법으로 안정성 확보\n/sc:implement --magic UI_component --fallback-to-manual\n# → Magic 서버 실패 시 수동 구현 가이드 제공\n```\n\n### 커스터마이징 고급 기법\n\n#### 프로젝트별 최적화\n```bash\n# 프로젝트 특성에 맞는 기본 설정\necho \"/sc:analyze --persona-frontend --magic --c7\" > .claude/project-defaults\n# → 프론트엔드 프로젝트용 기본 플래그\n```\n\n#### 워크플로우 자동화\n```bash\n# 복합 명령어 체인\nalias full-analysis=\"/sc:load project/ && /sc:analyze --ultrathink && /sc:improve --loop\"\n# → 프로젝트 로딩 → 심화 분석 → 반복 개선\n```\n\n### 디버깅 및 트러블슈팅\n\n#### 상세 진단\n```bash\n# 실행 과정 투명성 확보\n/sc:troubleshoot --introspect 복잡한_문제 --seq\n# → 사고 과정과 결정 근거 상세 노출\n\n# 플래그 충돌 진단\n/sc:analyze --plan --validate 프로젝트/\n# → 실행 전 플래그 호환성 검증\n```\n\n#### 성능 모니터링\n```bash\n# 리소스 사용량 모니터링\n/sc:implement --monitor-resources 대규모_기능\n# → 토큰, 메모리, 시간 사용량 실시간 추적\n```\n\n### 팀 협업 최적화\n\n#### 일관된 설정 공유\n```bash\n# 팀 전체 설정 동기화\n/sc:load --team-config team-superclaude-config.json\n# → 팀 공통 페르소나, 플래그, MCP 설정\n```\n\n#### 지식 공유 자동화\n```bash\n# 작업 과정 자동 문서화\n/sc:implement feature_name --document-process --persona-scribe=ko\n# → 구현 과정을 자동으로 한국어 문서화\n```\n\n### 보안 및 프라이버시\n\n#### 민감 정보 보호\n```bash\n# 안전 모드에서 민감한 작업\n/sc:implement --safe-mode --no-logging 결제_시스템\n# → 로깅 비활성화 + 최대 검증\n\n# 프라이버시 우선 모드\n/sc:analyze --local-only --no-mcp 기밀_프로젝트/\n# → 외부 서버 사용 없이 로컬에서만 분석\n```\n\n### 지속적 학습 및 개선\n\n#### 사용 패턴 분석\n```bash\n# 개인 사용 패턴 분석\n/sc:index --analyze-usage --optimize-recommendations\n# → 개인 작업 패턴 분석 후 최적화 제안\n\n# 팀 효율성 분석\n/sc:analyze --team-productivity team-usage-stats/\n# → 팀 전체 SuperClaude 활용도 분석\n```\n\n#### 새로운 패턴 실험\n```bash\n# 실험적 기능 안전 테스트\n/sc:implement --experimental --dry-run 새로운_접근법\n# → 실제 적용 전 안전한 실험\n\n# A/B 테스트\n/sc:implement feature_A --variant A && /sc:implement feature_B --variant B\n# → 두 가지 구현 방식 비교\n```\n\n이러한 고급 기법들을 마스터하면 SuperClaude의 진정한 파워를 발휘할 수 있습니다. 처음에는 기본 명령어부터 시작해서 점진적으로 고급 기능들을 익혀나가는 것을 권장합니다.\n\n---\n\n## 마무리\n\nSuperClaude는 단순한 도구가 아닌, 개발자의 사고 과정을 확장하고 생산성을 극대화하는 지능형 파트너입니다. 이 가이드에서 소개한 모든 기능들을 한 번에 익히려 하지 마시고, 실제 프로젝트에서 필요에 따라 점진적으로 활용해보시기 바랍니다.\n\n**시작 권장 사항:**\n1. 기본 명령어 (`/sc:implement`, `/sc:analyze`, `/sc:improve`) 부터 익히기\n2. 자주 사용하는 플래그 (`--c7`, `--seq`, `--magic`) 학습\n3. 프로젝트 도메인에 맞는 페르소나 활용\n4. 점진적으로 고급 기능 (Wave 모드, 서브 에이전트) 도입\n\nSuperClaude와 함께 더 효율적이고 즐거운 개발 경험을 만들어가시길 바랍니다! 🚀","structuredPatch":[]}}
{"parentUuid":"f75f9beb-3c6d-4e7c-8e8f-43713e25d144","isSidechain":false,"userType":"external","cwd":"D:\\SuperClaude_Framework","sessionId":"c6f11314-cf94-4c1f-9bb8-4588b9cdbfcb","version":"1.0.59","gitBranch":"master","message":{"id":"msg_01JtK4iqBEAxxzdCrZTa2tge","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_011A7cNYpfYw8f4NiAeyw2Bq","name":"TodoWrite","input":{"todos":[{"id":"1","content":"SuperClaude 기본 사용법 섹션 작성","status":"completed","priority":"high"},{"id":"2","content":"명령어별 활용 방법 섹션 작성","status":"completed","priority":"high"},{"id":"3","content":"페르소나 시스템 활용법 섹션 작성","status":"completed","priority":"medium"},{"id":"4","content":"플래그 시스템 활용법 섹션 작성","status":"completed","priority":"medium"},{"id":"5","content":"실전 활용 예시 섹션 작성","status":"completed","priority":"high"},{"id":"6","content":"문서 검토 및 완성","status":"completed","priority":"low"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":59651,"cache_read_input_tokens":0,"output_tokens":499,"service_tier":"standard"}},"requestId":"req_011CRRsqdFsSRqhmbvNFZBvq","type":"assistant","uuid":"88578e54-f411-4ba8-b2a2-8ea4ed3c3cdd","timestamp":"2025-07-24T12:54:11.650Z"}
{"parentUuid":"88578e54-f411-4ba8-b2a2-8ea4ed3c3cdd","isSidechain":false,"userType":"external","cwd":"D:\\SuperClaude_Framework","sessionId":"c6f11314-cf94-4c1f-9bb8-4588b9cdbfcb","version":"1.0.59","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_011A7cNYpfYw8f4NiAeyw2Bq","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"2f8d8138-e8fb-4209-ab99-197efa70fc6c","timestamp":"2025-07-24T12:54:11.698Z","toolUseResult":{"oldTodos":[{"content":"SuperClaude 기본 사용법 섹션 작성","status":"in_progress","priority":"high","id":"1"},{"content":"명령어별 활용 방법 섹션 작성","status":"pending","priority":"high","id":"2"},{"content":"페르소나 시스템 활용법 섹션 작성","status":"pending","priority":"medium","id":"3"},{"content":"플래그 시스템 활용법 섹션 작성","status":"pending","priority":"medium","id":"4"},{"content":"실전 활용 예시 섹션 작성","status":"pending","priority":"high","id":"5"},{"content":"문서 검토 및 완성","status":"pending","priority":"low","id":"6"}],"newTodos":[{"content":"SuperClaude 기본 사용법 섹션 작성","status":"completed","priority":"high","id":"1"},{"content":"명령어별 활용 방법 섹션 작성","status":"completed","priority":"high","id":"2"},{"content":"실전 활용 예시 섹션 작성","status":"completed","priority":"high","id":"5"},{"content":"페르소나 시스템 활용법 섹션 작성","status":"completed","priority":"medium","id":"3"},{"content":"플래그 시스템 활용법 섹션 작성","status":"completed","priority":"medium","id":"4"},{"content":"문서 검토 및 완성","status":"completed","priority":"low","id":"6"}]}}
{"parentUuid":"2f8d8138-e8fb-4209-ab99-197efa70fc6c","isSidechain":false,"userType":"external","cwd":"D:\\SuperClaude_Framework","sessionId":"c6f11314-cf94-4c1f-9bb8-4588b9cdbfcb","version":"1.0.59","gitBranch":"master","message":{"id":"msg_01K78ZX9CnFT6uBhrEeixmCU","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"SuperClaude 프레임워크의 완전 활용 가이드를 작성했습니다. \n\n이 문서는 다음과 같은 구조로 구성되어 있습니다:\n\n📋 **주요 섹션:**\n- **설치 및 기본 개념**: SuperClaude 설치부터 핵심 구성 요소 이해\n- **16개 핵심 명령어**: 개발/분석/품질/문서화/메타 명령어 상세 설명  \n- **11개 전문 페르소나**: 도메인별 특화된 AI 행동 패턴\n- **플래그 시스템**: 세밀한 실행 제어와 자동 활성화 규칙\n- **MCP 서버 통합**: Context7, Sequential, Magic, Playwright 활용법\n- **7가지 실전 시나리오**: 새 기능 구현부터 DevOps까지\n- **고급 팁**: 성능 최적화, 병렬 처리, 에러 복구 전략\n\n🔥 **핵심 특징:**\n- 각 명령어별 구체적 사용 예시와 자동 활성화 조건\n- 페르소나별 우선순위와 품질 기준 명시\n- 플래그 조합 패턴과 충돌 해결 규칙\n- 실제 개발 상황별 단계적 접근법\n- 토큰 효율성과 성능 최적화 전략\n\n문서는 초보자부터 고급 사용자까지 모든 수준에서 활용 가능하도록 단계적으로 구성했습니다. 실제 프로젝트에서 바로 적용할 수 있는 구체적인 명령어 예시와 함께 SuperClaude의 모든 기능을 최대한 활용하는 방법을 상세히 설명했습니다."}],"stop_reason":"end_turn","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":785,"cache_read_input_tokens":59651,"output_tokens":566,"service_tier":"standard"}},"requestId":"req_011CRRsrWwdxi3ESAsYSEYan","type":"assistant","uuid":"215a1473-6107-4a6d-9c7a-198dabfbb677","timestamp":"2025-07-24T12:54:25.002Z"}
